import{_ as h,c as n,o as t,ag as a,j as i}from"./chunks/framework.DjwDO6w3.js";const l="/v/3/assets/imperative-declarative-diagram.CQCwVrFs.png",p="/v/3/assets/Color-Coded-RxJS-vs-Imperative-Signals.Bsb2G3RZ.png",v=JSON.parse('{"title":"The Imperative Trap","description":"","frontmatter":{},"headers":[],"relativePath":"guide/thinking-reactively/imperative-trap.md","filePath":"guide/thinking-reactively/imperative-trap.md"}'),e={name:"guide/thinking-reactively/imperative-trap.md"},k={class:"details custom-block"},r={style:{height:"100px",width:"500px","margin-top":"-150px","z-index":"100",position:"absolute","stroke-width":"3px"}};function d(g,s,F,c,o,y){return t(),n("div",null,[s[2]||(s[2]=a(`<h1 id="the-imperative-trap" tabindex="-1">The Imperative Trap <a class="header-anchor" href="#the-imperative-trap" aria-label="Permalink to &quot;The Imperative Trap&quot;">​</a></h1><p>Imperative code doesn&#39;t scale with complexity.</p><p>Reactive code is the polar opposite of imperative code; it&#39;s extremely difficult to refactor imperative code to reactive code.</p><p>This means that the only way to flexibly adapt with complexity and change is to manage state reactively from the very start of every feature.</p><h2 id="definition" tabindex="-1">Definition <a class="header-anchor" href="#definition" aria-label="Permalink to &quot;Definition&quot;">​</a></h2><p>Imperative <strong><em>programming</em></strong> is a style of programming that contains imperative code.</p><p>Imperative <strong><em>code</em></strong> is any code that commands or controls things represented by code elsewhere.</p><p>This is a traditional example of imperative programming:</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = [] </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">as</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> number</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">for</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> (</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">let</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> &lt;= </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">3</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">++) {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">push</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> ** </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Where specifically is the imperative code? Can you see the line of code that&#39;s commanding something declared in another line of code?</p>`,10)),i("details",k,[s[1]||(s[1]=a(`<summary>ANSWER</summary><p>Line 4 is commanding <code>squared</code> to add a number:</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = [] </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">as</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> number</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">for</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> (</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">let</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> &lt;= </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">3</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">++) {</span></span>
<span class="line highlighted"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">push</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> ** </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,3)),(t(),n("svg",r,s[0]||(s[0]=[i("g",{transform:" scale(0.9, 0.9), translate(130, 25)"},[i("line",{x1:"15",y1:"70",x2:"15",y2:"15",stroke:"var(--vp-c-brand-3)"}),i("line",{x1:"0",y1:"30",x2:"15",y2:"15",stroke:"var(--vp-c-brand-3)"}),i("line",{x1:"30",y1:"30",x2:"15",y2:"15",stroke:"var(--vp-c-brand-3)"})],-1)])))]),s[3]||(s[3]=a(`<p>&quot;Imperative&quot; means <a href="https://www.merriam-webster.com/dictionary/imperative" target="_blank" rel="noreferrer">&quot;expressive of a command.&quot;</a></p><p>The command in this code is the <code>.push()</code>.</p><p>That is the reason it is imperative.</p><h3 id="long-definition" tabindex="-1">Long Definition <a class="header-anchor" href="#long-definition" aria-label="Permalink to &quot;Long Definition&quot;">​</a></h3><details class="details custom-block"><summary>IMPERATIVE CODE—THE LONG DEFINITION</summary><p>Imperative programming is a style of programming that always has 2 things:</p><ol><li>Incomplete initial descriptions</li><li>Commands modifying those descriptions later</li></ol><p>This is a traditional example of imperative programming:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// 1. Incomplete initial description:</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = [] </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">as</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> number</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">for</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> (</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">let</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> &lt;= </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">3</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">++) {</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // 2. Command modifying squared after its initial description:</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">push</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> ** </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><p>The initial description of <code>squared</code> is an empty array, which is incomplete, because after a few more lines have executed, it has become an array of <code>[1, 4, 9]</code>. You can&#39;t know <em>what</em> <code>squared</code> actually is until you see <em>how</em> it&#39;s modified in the step-by-step instructions that follow.</p><p>Imperative programming is the opposite of declarative programming, where initial descriptions are complete:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> squared2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = [</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">3</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">].</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">map</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">i</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> ** </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span></code></pre></div><p>With declarative programming, we see <em>what</em> <code>squareNumbers</code> is from the start.</p><h3 id="camouflage" tabindex="-1">Camouflage <a class="header-anchor" href="#camouflage" aria-label="Permalink to &quot;Camouflage&quot;">​</a></h3><p>Imperative code can be hard to identify. Usually there isn&#39;t a neat <code>for</code> loop modifying a simple array, but a sprawling mess of tangled code modifying several variables in scope, as well as invoking functions that change variables declared in other scopes.</p><p>We don&#39;t need a loop in order to modify <code>squared</code> with step-by-step instructions:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = [] </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">as</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> number</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">push</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">push</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">4</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">push</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">9</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span></code></pre></div><p>Expressed like this, we can still see <em>how</em> <code>squared</code> is constructed, and the initial description of <code>squared</code> still doesn&#39;t tell us <em>what</em> it is initially. The description is still spread-out, and the example is still imperative.</p><p>This is all true even if there is only a single command modifying <code>squared</code>:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// 1. Incomplete initial description:</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = [] </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">as</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> number</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// 2. Command modifying squared after its initial description:</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">push</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span></code></pre></div><p>But just look at this line alone:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = [] </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">as</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> number</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">[];</span></span></code></pre></div><p>Based on this alone, we can&#39;t know for sure <em>what</em> <code>squareNumbers</code> ends up being. <code>const</code> prevents reassignments, but there could still be code somewhere that mutates adds to the description of <code>squared</code>.</p><p>So the declaration of <code>squareNumbers</code> itself is not what makes it part of the imperative programming style or not.</p><p>Many state management libraries encourage this pattern, but it is difficult to see because the code is more spread-out.</p><div class="info custom-block"><p class="custom-block-title">CHECK BACK LATER</p><p>This part of the guide is unfinished.</p></div></details><h2 id="more-examples-of-imperative-code" tabindex="-1">More Examples of Imperative Code <a class="header-anchor" href="#more-examples-of-imperative-code" aria-label="Permalink to &quot;More Examples of Imperative Code&quot;">​</a></h2><p>Here are some examples of imperative programming with the specific imperative code lines highlighted.</p><p>If you have any issues with these, please refer to the <a href="#long-definition">long definition</a> of imperative code.</p><details class="details custom-block" open=""><summary>Sum of Squared Numbers</summary><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-s-AHM" id="tab-P1yV8Ha" checked><label data-title="Original Snippet" for="tab-P1yV8Ha">Original Snippet</label><input type="radio" name="group-s-AHM" id="tab-GMUdxjG"><label data-title="Imperative Lines Highlighted" for="tab-GMUdxjG">Imperative Lines Highlighted</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">let</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> squaredSum</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">for</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> (</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">let</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> &lt;= </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">10</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">++) {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  squaredSum</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> += </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> ** </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">setTimeout</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  squaredSum</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">100</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}, </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1000</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">let</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> squaredSum</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">for</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> (</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">let</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> &lt;= </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">10</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">++) {</span></span>
<span class="line highlighted"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  squaredSum</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> += </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> ** </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">setTimeout</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line highlighted"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  squaredSum</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">100</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}, </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1000</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span></code></pre></div></div></div></details><details class="details custom-block"><summary>Counter</summary><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-4MPgX" id="tab-QbRw2WK" checked><label data-title="React" for="tab-QbRw2WK">React</label><input type="radio" name="group-4MPgX" id="tab-gyYuwa0"><label data-title="Imperative Highlighted" for="tab-gyYuwa0">Imperative Highlighted</label><input type="radio" name="group-4MPgX" id="tab-uScFHjx"><label data-title="Angular" for="tab-uScFHjx">Angular</label><input type="radio" name="group-4MPgX" id="tab-cXOL92U"><label data-title="Imperative Highlighted" for="tab-cXOL92U">Imperative Highlighted</label></div><div class="blocks"><div class="language-tsx vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">useState</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;react&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> const</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> Component</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = () </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">setCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">] = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useState</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> increment</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">    setCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">prevCount</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> prevCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> + </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> decrement</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">    setCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">prevCount</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> prevCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> - </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">};</span></span></code></pre></div><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">useState</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;react&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> const</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> Component</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = () </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">setCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">] = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useState</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> increment</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line highlighted"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">    setCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">prevCount</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> prevCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> + </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> decrement</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line highlighted"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">    setCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">prevCount</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> prevCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> - </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">};</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">signal</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;@angular/core&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> Component</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">signal</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  increment</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">update</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">prevCount</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> prevCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> + </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  decrement</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">update</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">prevCount</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> prevCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> - </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">signal</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;@angular/core&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> Component</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">signal</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  increment</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line highlighted"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">update</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">prevCount</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> prevCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> + </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  decrement</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line highlighted"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">update</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">prevCount</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> prevCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> - </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div></div></div></details><details class="details custom-block"><summary>Increment Chain</summary><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-qAf2E" id="tab-NK8KhvB" checked><label data-title="Original Snippet" for="tab-NK8KhvB">Original Snippet</label><input type="radio" name="group-qAf2E" id="tab-zouPrnh"><label data-title="Imperative Lines Highlighted" for="tab-zouPrnh">Imperative Lines Highlighted</label><input type="radio" name="group-qAf2E" id="tab-YFJwIs2"><label data-title="Explanation" for="tab-YFJwIs2">Explanation</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> obj</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;"> 0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">obj</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">++;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> increment</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  obj</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">++;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> incrementTwice</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  increment</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  increment</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> incrementThrice</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  incrementTwice</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  increment</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">incrementThrice</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">console</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">log</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">\`Final count: </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">\${</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">obj</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">count</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">\`</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// Final count: 3</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> obj</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;"> 0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">};</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">obj</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">++;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> increment</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line highlighted"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  obj</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">++;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> incrementTwice</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line highlighted"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  increment</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line highlighted"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  increment</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> incrementThrice</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line highlighted"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  incrementTwice</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line highlighted"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  increment</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">incrementThrice</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">console</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">log</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">\`Final count: </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">\${</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">obj</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">count</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">\`</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// Final count: 3</span></span></code></pre></div><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">A function containing imperative code is modifying something</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">that was declared somewhere else every time it is invoked.</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">This means that every line of code that invokes it is also</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">responsible for the change.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">This has to be the case, or we could almost never highlight</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">any imperative code, because most of the time the code we</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">write to make changes is using a wrapper function.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#800000;">\`console.log\`</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> is modifying the console log, which is defined</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">by the browser, not developer code. Although console logs don&#39;t</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">affect application state, it is a shared space being mutated</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">and it&#39;s good to clean them up after use.</span></span></code></pre></div></div></div></details><h2 id="imperative-code-scatters-context" tabindex="-1">Imperative Code Scatters Context <a class="header-anchor" href="#imperative-code-scatters-context" aria-label="Permalink to &quot;Imperative Code Scatters Context&quot;">​</a></h2><p>Imperative code splits up and scatters descriptions.</p><p>In this example, the timeout is describing the value of <code>squared</code> after <code>1000ms</code>:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = [] </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">as</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> number</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">for</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> (</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">let</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> &lt;= </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">3</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">++) {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">push</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> ** </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">setTimeout</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">push</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">100</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}, </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1000</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span></code></pre></div><p>Anywhere in the entire codebase that can get a reference to <code>squared</code> could add to the description of its behavior by commanding it in some way. In order to understand <em>what</em> it is, you have to find all references and understand code across often dozens of files.</p><p>Understanding every reference requires not just understanding the line of code the command is in, but everything in its context that it itself references. In this example, you don&#39;t know what <code>newAmount</code> is or why this code is running, so you have to spend some time understanding all of that:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">let</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> newAmount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">newAmount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> += </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">calculateBonusAmount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">settings</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">user</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> addToNewAmount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">amount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">: </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">number</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">) {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  newAmount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> += </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">amount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  waitAndPushToSquaredSum</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> waitAndPushToSquaredSum</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  setTimeout</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">push</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">newAmount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    global</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">redraw</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }, </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1000</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><h2 id="declarative-code-groups-context" tabindex="-1">Declarative Code Groups Context <a class="header-anchor" href="#declarative-code-groups-context" aria-label="Permalink to &quot;Declarative Code Groups Context&quot;">​</a></h2><p>The opposite of imperative programming is declarative programming.</p><p>Declarative programming is when every declaration is complete from the start, not added onto later via step-by-step commands for a different final result.</p><p>With declarative code, you can understand <em>what</em> something is from its initial description. It isn&#39;t broken up into pieces describing <em>how</em> it should be assembled later and elsewhere.</p><p>Humans and AI can both understand declarative code more easily, thanks to descriptions being contained and having more limited context.</p><p>In this diagram of an imperative Angular codebase, the only change was converting it to declarative code:</p><p><img src="`+l+`" alt="Imperative vs Declarative Programming Diagram"></p><p>It&#39;s clear that only one of these patterns is scalable.</p><p>Read more about the benefits of declarative code:</p><ol><li><a href="https://dev.to/mfp22/rxjs-can-save-your-codebase-49fi#focus" target="_blank" rel="noreferrer">Focus</a></li><li><a href="https://dev.to/mfp22/rxjs-can-save-your-codebase-49fi#debugging-with-context" target="_blank" rel="noreferrer">Debugging with Context</a></li><li><a href="https://dev.to/mfp22/rxjs-can-save-your-codebase-49fi#avoiding-bugs-with-context" target="_blank" rel="noreferrer">Avoiding Bugs with Context</a></li><li><a href="https://dev.to/mfp22/rxjs-can-save-your-codebase-49fi#comprehensibility" target="_blank" rel="noreferrer">Comprehensibility</a></li><li><a href="https://dev.to/mfp22/rxjs-can-save-your-codebase-49fi#declarativeness-in-rxjs-vs-signals-only" target="_blank" rel="noreferrer">Separation of Concerns / Colocation</a></li><li><a href="https://dev.to/this-is-learning/5-reasons-to-avoid-imperative-code-e09#1-inconsistent-state" target="_blank" rel="noreferrer">Consistent State</a></li><li><a href="https://dev.to/this-is-learning/5-reasons-to-avoid-imperative-code-e09#2-state-elevation" target="_blank" rel="noreferrer">State Locality</a></li><li><a href="https://dev.to/this-is-learning/5-reasons-to-avoid-imperative-code-e09#3-large-bundles" target="_blank" rel="noreferrer">Smaller Bundles</a></li><li><a href="https://dev.to/this-is-learning/5-reasons-to-avoid-imperative-code-e09#4-unnecessary-complexity" target="_blank" rel="noreferrer">Intuitive Dependency Direction</a></li><li><a href="https://dev.to/this-is-learning/5-reasons-to-avoid-imperative-code-e09#bad-function-names" target="_blank" rel="noreferrer">Easier and Better Variable Names</a></li></ol><h2 id="reactive-programming" tabindex="-1">Reactive Programming <a class="header-anchor" href="#reactive-programming" aria-label="Permalink to &quot;Reactive Programming&quot;">​</a></h2><p>Reactive programming is just declarative programming, but for dynamic behavior.</p><p>For example, this JSX is declarative:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">return</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;"> &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">h1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">I WILL NEVER CHANGE!</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">h1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span></code></pre></div><p>And this JSX is reactive, because it now reacts to new values for <code>day</code>:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">return</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;"> &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">h1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">I WILL CHANGE ON </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">day</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">!</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">h1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span></code></pre></div><p>When static content becomes dynamic, developers can either implement it imperatively, or keep it declarative by implementing it reactively.</p><h2 id="polar-opposites" tabindex="-1">Polar Opposites <a class="header-anchor" href="#polar-opposites" aria-label="Permalink to &quot;Polar Opposites&quot;">​</a></h2><p>Look at where the business logic is located in the imperative <code>squared</code> example:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line highlighted"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = [] </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">as</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> number</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">[];</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> cubed</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = [] </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">as</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> number</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">for</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> (</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">let</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> &lt;= </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">3</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">++) {</span></span>
<span class="line highlighted"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">push</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> ** </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  cubed</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">push</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> ** </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">3</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">setTimeout</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line highlighted"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  squared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">push</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">100</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  cubed</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">push</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1000</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}, </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1000</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span></code></pre></div><p>What is determining what lines of code live next to each other? The <strong><em>timing</em></strong> they execute in. <code>squared</code> is defined across 3 places because they run at different times.</p><div class="tip custom-block"><p class="custom-block-title">KEY TAKEAWAY</p><p><em><strong>Imperative code is organized by when it runs.</strong></em></p></div><p>In the declarative/reactive version, everything describing <code>squared</code>&#39;s behavior should be in one place, including some asynchronous logic. Here it is using reactive extensions for JavaScript (<a href="https://rxjs.dev/" target="_blank" rel="noreferrer">RxJS</a>):</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> event$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">timer</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1000</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> initialSquared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = [</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">3</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">].</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">map</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">i</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> ** </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line highlighted"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> squared$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">concat</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span></span>
<span class="line highlighted"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  of</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">initialSquared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">),</span></span>
<span class="line highlighted"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  event$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">pipe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">map</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> initialSquared</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">concat</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">([</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">100</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">]))),</span></span>
<span class="line highlighted"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> initialCubed</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = [</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">3</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">].</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">map</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">i</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> i</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> ** </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">3</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> cubed$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">concat</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  of</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">initialCubed</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">),</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  event$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">pipe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">map</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> initialCubed</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">concat</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">([</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1000</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">]))),</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span></code></pre></div><p>Now <code>squared</code> is completely described in one place.</p><div class="tip custom-block"><p class="custom-block-title">KEY TAKEAWAY</p><p><em><strong>Declarative code is organized by relevance.</strong></em></p></div><p>The difference between declarative and imperative code is <strong><em>structural</em></strong>.</p><p>Here is another example of the same functionality implemented reactively and imperatively. Logic is color-coded by relevance:</p><p><img src="`+p+`" alt="Color-Coded RxJS vs Imperative Signals"></p><p>Reactive programming tends to be much cleaner and more concise in complex examples, but the point is the <strong><em>structural</em></strong> difference between the approaches.</p><p>Even converting apps between frameworks is usually easier than converting between imperative and declarative structure. To convert from React to Angular, for most of the code you would only need to write a few straight-forward find/replace operations.</p><details class="details custom-block"><summary>COUNTER IN ANGULAR VS REACT</summary><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-SA_vq" id="tab-u2la_qc" checked><label data-title="React" for="tab-u2la_qc">React</label><input type="radio" name="group-SA_vq" id="tab-2GXBGXZ"><label data-title="Angular" for="tab-2GXBGXZ">Angular</label></div><div class="blocks"><div class="language-tsx vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">useState</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;react&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> const</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> Component</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = () </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">setCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">] = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useState</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> increment</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">    setCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">prevCount</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> prevCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> + </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> decrement</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">    setCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">prevCount</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> prevCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> - </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // ...</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">};</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">signal</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;@angular/core&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> Component</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">signal</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  increment</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">update</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">prevCount</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> prevCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> + </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  decrement</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">update</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">prevCount</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> prevCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> - </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div></div></div></details><p>But imperative and declarative programming are polar opposites, making refactoring out of an imperative mess almost as costly as rewriting everything from scratch. Once the first line of imperative code is written, it is much easier to add more imperative code than to start over with declarative code.</p><p>So, make sure you just start with declarative code!</p>`,52))])}const b=h(e,[["render",d]]);export{v as __pageData,b as default};
