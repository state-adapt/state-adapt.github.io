"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[125],{6125:(h,s,t)=>{t.r(s),t.d(s,{DocsNgrxComponent:()=>d});var r=t(1917),c=t(2309),e=t(4650);let d=(()=>{class a{constructor(){this.html='<h1 id="state-adaptngrx">@state-adapt/ngrx</h1>\n<h2 id="peer-dependencies">Peer Dependencies</h2>\n<p><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/core\'})); void(0)">@state-adapt/core</a></p>\n<p><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs\'})); void(0)">@state-adapt/rxjs</a></p>\n<p><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/angular/docs/angular\'})); void(0)">@state-adapt/angular</a></p>\n<h2 id="index">Index</h2>\n<p><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/angular/docs/ngrx#adaptngrx\'})); void(0)"><code>adaptNgrx</code></a></p>\n<p><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/angular/docs/ngrx#watchngrx\'})); void(0)"><code>watchNgrx</code></a></p>\n<h2 id="migration-guide">Migration Guide</h2>\n<p><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/angular/docs/ngrx#200\'})); void(0)">2.0.0</a></p>\n<h2 id="adaptngrx"><code>adaptNgrx</code></h2>\n<blockquote>\n<p>Copilot tip: Copy examples into your file or click to definition to open file with context for better Copilot suggestions.</p>\n</blockquote>\n<p>  <code>adaptNgrx</code> wraps <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#stateadaptadapt\'})); void(0)"><code>StateAdapt.adapt</code></a>, calling <code>inject(AdaptNgrx)</code> to get an instance of <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#stateadapt\'})); void(0)"><code>StateAdapt</code></a> that uses NgRx for the global store.</p>\n<p>  <code>adaptNgrx</code> creates a store that will manage state while it has subscribers.</p>\n<h3 id="example-initialstate-only">Example: initialState only</h3>\n<p>  <code>adaptNgrx(initialState)</code></p>\n<p>  The simplest way to use <code>adaptNgrx</code> is to only pass it an initial state. <code>adaptNgrx</code> returns a store object that is ready to start managing state once it has subscribers.\n  The store object comes with <code>set</code> and <code>reset</code> methods for updating state, and a <code>state$</code> observable of the store&#39;s state.</p>\n<pre><code class="language-typescript">export class MyComponent {\n  name = adaptNgrx(&#39;John&#39;);\n\n  constructor() {\n    this.name.state$.subscribe(console.log); // logs &#39;John&#39;\n\n    this.name.set(&#39;Johnsh&#39;); // logs &#39;Johnsh&#39;\n    this.name.reset(); // logs &#39;John&#39;\n  }\n}\n</code></pre>\n<p>  Usually you won&#39;t manually subscribe to state like this, but you can if you want the store to immediately start managing state\n  and never clean it up.</p>\n<h3 id="example-using-an-adapter">Example: Using an adapter</h3>\n<p>  <code>adaptNgrx(initialState, adapter)</code></p>\n<p>  You can also pass in a state <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/core#adapter\'})); void(0)"><code>Adapter</code></a> object to customize the state change functions and selectors.</p>\n<pre><code class="language-typescript">export class MyComponent {\n  name = adaptNgrx(&#39;John&#39;, {\n    concat: (state, payload: string) =&gt; state + payload,\n    selectors: {\n      length: state =&gt; state.length,\n    },\n  });\n\n  constructor() {\n    this.name.state$.subscribe(console.log); // Logs &#39;John&#39;\n    this.name.length$.subscribe(console.log); // Logs 4\n\n    this.name.concat(&#39;sh&#39;); // logs &#39;Johnsh&#39; and 6\n    this.name.reset(); // logs &#39;John&#39; and 4\n  }\n}\n</code></pre>\n<h3 id="example-using-adaptoptions">Example: Using <code>AdaptOptions</code></h3>\n<p>  <code>adaptNgrx(initialState, { adapter, sources, path })</code></p>\n<p>  You can also define an adapter, sources, and/or a state path as part of an <code>AdaptOptions</code> object.</p>\n<p>  Sources allow the store to declaratively react to external events rather than being commanded\n  by imperative code in callback functions.</p>\n<pre><code class="language-typescript">export class MyService {\n  tick$ = interval(1000);\n\n  clock = adaptNgrx(0, {\n    adapter: {\n      increment: state =&gt; state + 1,\n    },\n    sources: this.tick$, // or [this.tick$], or { set: this.tick$ }, or { set: [this.tick$] }\n    path: &#39;clock&#39;,\n  });\n\n  constructor() {\n    this.clock.state$.subscribe(console.log); // Logs 0, 1, 2, 3, etc.\n  }\n}\n</code></pre>\n<p>  When a store is subscribed to, it passes the subscriptions up to its sources.\n  For example, if a store has an HTTP source, it will be triggered when the store\n  receives its first subscriber, and it will be canceled when the store loses its\n  last subscriber.</p>\n<p>  There are 4 possible ways sources can be defined:</p>\n<p>  1. A source can be a single source or <a href="https://rxjs.dev/guide/observable">Observable</a>&lt;<code>State</code>&gt;. When the source emits, it triggers the store&#39;s <code>set</code> method\n  with the payload.</p>\n<h4 id="example-single-source-or-observable">Example: Single source or observable</h4>\n<pre><code class="language-typescript">export class MyService {\n  nameChange$ = source&lt;string&gt;();\n\n  name = adaptNgrx(&#39;John&#39;, {\n    sources: this.nameChange$,\n    path: &#39;name&#39;,\n  });\n\n  constructor() {\n    this.name.state$.subscribe(console.log); // Logs &#39;John&#39;\n\n    this.nameChange$.next(&#39;Johnsh&#39;); // logs &#39;Johnsh&#39;\n  }\n}\n</code></pre>\n<p>  2. A source can be an array of sources or <a href="https://rxjs.dev/guide/observable">Observable</a>&lt;<code>State</code>&gt;. When any of the sources emit, it triggers the store&#39;s <code>set</code>\n   method with the payload.</p>\n<h4 id="example-array-of-sources-or-observables">Example: Array of sources or observables</h4>\n<pre><code class="language-typescript">export class MyService {\n  nameChange$ = source&lt;string&gt;();\n  nameChange2$ = source&lt;string&gt;();\n\n  name = adaptNgrx(&#39;John&#39;, {\n    sources: [this.nameChange$, this.nameChange2$],\n    path: &#39;name&#39;,\n  });\n\n  constructor() {\n    this.name.state$.subscribe(console.log); // Logs &#39;John&#39;\n\n    this.nameChange$.next(&#39;Johnsh&#39;); // logs &#39;Johnsh&#39;\n    this.nameChange2$.next(&#39;Johnsh2&#39;); // logs &#39;Johnsh2&#39;\n  }\n}\n</code></pre>\n<p>  3. A source can be an object with keys that match the names of the <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/core#adapter\'})); void(0)"><code>Adapter</code></a> state change functions, with a corresponding source or array of\n  sources that trigger the store&#39;s reaction with the payload.</p>\n<h4 id="example-object-of-sources-or-observables">Example: Object of sources or observables</h4>\n<pre><code class="language-typescript">export class MyService {\n  nameChange$ = source&lt;string&gt;();\n  nameReset$ = source&lt;void&gt;();\n\n  name = adaptNgrx(&#39;John&#39;, {\n    sources: {\n      set: this.nameChange$,\n      reset: this.nameReset$,\n    },\n    path: &#39;name&#39;,\n  });\n\n  constructor() {\n    this.name.state$.subscribe(console.log); // Logs &#39;John&#39;\n\n    this.nameChange$.next(&#39;Johnsh&#39;); // logs &#39;Johnsh&#39;\n    this.nameReset$.next(); // logs &#39;John&#39;\n  }\n}\n</code></pre>\n<p>  4. A source can be a function that takes in a detached store (doesn&#39;t chain off of sources) and returns any of the above\n  types of sources or observables.</p>\n<h4 id="example-function-that-returns-an-observable">Example: Function that returns an observable</h4>\n<pre><code class="language-typescript">export class MyService {\n  name = adaptNgrx(&#39;John&#39;, {\n    sources: store =&gt; store.state$.pipe(\n      delay(1000),\n      map(name =&gt; `${name}sh`),\n    ),\n    path: &#39;name&#39;,\n  });\n\n  constructor() {\n    this.name.state$.subscribe(console.log);\n    // Logs &#39;John&#39;, then &#39;Johnsh&#39; after 1 second, &#39;Johnshsh&#39; after 2 seconds, etc.\n  }\n}\n</code></pre>\n<p>  Defining a path alongside sources is recommended to enable debugging with Redux DevTools. It&#39;s easy to trace\n  singular state changes caused by user events, but it&#39;s much harder to trace state changes caused by RxJS streams.</p>\n<p>  The path string specifies the location in the global store you will find the state for the store being created\n  (while the store has subscribers). StateAdapt splits this string at periods <code>&#39;.&#39;</code> to create an object path within\n  the global store. Here are some example paths and the resulting global state objects:</p>\n<h4 id="example-paths-and-global-state">Example: Paths and global state</h4>\n<pre><code class="language-typescript">export class MyComponent {\n  store = adaptNgrx(0, { path: &#39;number&#39; });\n\n  constructor() {\n    this.store.state$.subscribe();\n    // global state: { number: 0 }\n  }\n}\n</code></pre>\n<pre><code class="language-typescript">export class MyComponent {\n  store = adaptNgrx(0, { path: &#39;featureA.number&#39; });\n\n  constructor() {\n    this.store.state$.subscribe();\n    // global state: { featureA: { number: 0 } }\n  }\n}\n</code></pre>\n<pre><code class="language-typescript">export class MyComponent {\n  store = adaptNgrx(0, { path: &#39;featureA.featureB.number&#39; });\n\n  constructor() {\n    this.store.state$.subscribe();\n    // global state: { featureA: { featureB: { number: 0 } } }\n  }\n}\n</code></pre>\n<p>  Each store completely owns its own state. If more than one store tries to use the same path, StateAdapt will throw this error:</p>\n<p>  <code>Path &#39;${path}&#39; collides with &#39;${existingPath}&#39;, which has already been initialized as a state path.</code></p>\n<p>  This applies both to paths that are identical as well as paths that are substrings of each other. For example, if <code>&#39;featureA&#39;</code>\n  is already being used by a store and then another store tried to initialize at <code>&#39;featureA.number&#39;</code>, that error would be thrown.</p>\n<p>  To help avoid this error, StateAdapt provides a <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/core#getid\'})); void(0)"><code>getId</code></a> function that can be used to generate unique paths:</p>\n<h4 id="example-getid-for-unique-paths">Example: getId for unique paths</h4>\n<pre><code class="language-typescript">import { getId } from &#39;@state-adapt/core&#39;;\n\nexport class MyComponent {\n  store1 = adaptNgrx(0, { path: &#39;number&#39; + getId() });\n  store2 = adaptNgrx(0, { path: &#39;number&#39; + getId() });\n\n  constructor() {\n    this.store1.state$.subscribe();\n    this.store2.state$.subscribe();\n    // global state includes both: { number0: 0, number1: 0 }\n  }\n}\n</code></pre>\n<h3 id="no-path">No path</h3>\n<p>  If no path is provided, then the store&#39;s path defaults to the result of calling <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/core#getid\'})); void(0)"><code>getId</code></a>.</p>\n<h3 id="remember">Remember!</h3>\n<p>  The store needs to have subscribers in order to start managing state,\n  and it only subscribes to sources when it has subscribers itself.</p>\n<h2 id="watchngrx"><code>watchNgrx</code></h2>\n<blockquote>\n<p>Copilot tip: Copy examples into your file or click to definition to open file with context for better Copilot suggestions.</p>\n</blockquote>\n<p>  <code>watchNgrx</code> wraps <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#stateadaptwatch\'})); void(0)"><code>StateAdapt.watch</code></a>, calling <code>inject(AdaptNgrx)</code> to get an instance of <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#stateadapt\'})); void(0)"><code>StateAdapt</code></a>\n  that uses NgRx for the global store.</p>\n<p>  <code>watchNgrx</code> returns a detached store (doesn&#39;t chain off of sources). This allows you to watch state without affecting anything.\n  It takes 2 arguments: The path of the state you are interested in, and the adapter containing the selectors you want to use.</p>\n<pre><code class="language-tsx">watchNgrx(path, adapter)\n</code></pre>\n<p>  path \u2014 Object path in Redux Devtools</p>\n<p>  adapter \u2014 Object with state change functions and selectors</p>\n<h3 id="usage">Usage</h3>\n<p>  <code>watchNgrx</code> enables accessing state without subscribing to sources. For example, if your adapter manages the loading state\n  for an HTTP request and you need to know if the request is loading before the user is interested in the data,\n  <code>watchNgrx</code> can give you access to it without triggering the request.</p>\n<h4 id="example-accessing-loading-state">Example: Accessing loading state</h4>\n<pre><code class="language-tsx">watchNgrx(&#39;data&#39;, httpAdapter).loading$.subscribe(console.log);\n</code></pre>\n\x3c!-- cache 31 --\x3e\n\n<h3 id="200">2.0.0</h3>\n<p><a href="https://stackblitz.com/edit/vitejs-vite-bca52l?file=src%2FApp.tsx,src%2FtransformCode.ts">Here is a migrator in StackBlitz</a>\nfor automatic migrating. Use Prettier to format the result.</p>\n<p>The 4 overloads of <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#stateadaptadapt\'})); void(0)"><code>StateAdapt.adapt</code></a> have been removed.\nSince <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/angular/docs/ngrx#adaptngrx\'})); void(0)"><code>adaptNgrx</code></a> wraps <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#stateadaptadapt\'})); void(0)"><code>StateAdapt.adapt</code></a>,\nthe same changes apply to <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/angular/docs/ngrx#adaptngrx\'})); void(0)"><code>adaptNgrx</code></a>.\nSee the <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#200\'})); void(0)">migration guide for @state-adapt/rxjs</a> for details.</p>\n'}}return a.\u0275fac=function(n){return new(n||a)},a.\u0275cmp=e.Xpm({type:a,selectors:[["sa-docs-ngrx"]],standalone:!0,features:[e.jDz],decls:2,vars:1,consts:[[3,"html"]],template:function(n,p){1&n&&(e.TgZ(0,"sa-content"),e._UZ(1,"sa-html",0),e.qZA()),2&n&&(e.xp6(1),e.Q6J("html",p.html))},dependencies:[c.S,r.XB],encapsulation:2}),a})()}}]);