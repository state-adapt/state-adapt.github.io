import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.DjwDO6w3.js";const g=JSON.parse('{"title":"Function: useAdapt()","description":"","frontmatter":{"definedIn":"https://github.com/state-adapt/state-adapt/blob/4e457fa33331f265d75eaddb646761782498dd8e/libs/react/src/lib/use-adapt.ts#L283"},"headers":[],"relativePath":"api/react/index/useAdapt.md","filePath":"api/react/index/useAdapt.md"}'),h={name:"api/react/index/useAdapt.md"};function e(l,s,p,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="function-useadapt" tabindex="-1">Function: useAdapt() <a class="header-anchor" href="#function-useadapt" aria-label="Permalink to &quot;Function: useAdapt()&quot;">​</a></h1><blockquote><p><strong>useAdapt</strong>&lt;<code>State</code>, <code>S</code>, <code>R</code>&gt;(<code>initialState</code>, <code>second</code>): <code>ProxyStoreTuple</code>&lt;<code>State</code>, <code>InitializedSmartStore</code>&lt;<code>State</code>, <code>S</code>, <code>R</code>&gt;&gt;</p></blockquote><p>Defined in: <a href="https://github.com/state-adapt/state-adapt/blob/4e457fa33331f265d75eaddb646761782498dd8e/libs/react/src/lib/use-adapt.ts#L283" target="_blank" rel="noreferrer">lib/use-adapt.ts:283</a></p><p><code>useAdapt</code> is a hook that wraps <a href="./../../rxjs/index/StateAdapt.html#adapt">StateAdapt.adapt</a> and <a href="./useStore.html">useStore</a>. It creates a store, immediately subscribes to it, and returns a tuple <code>[selectorResults, setState]</code> where <code>selectorResults</code> is a proxy object containing results from the store&#39;s selectors, and <code>setState</code> is a function with additional properties assigned from the store created by <a href="./../../rxjs/index/StateAdapt.html#adapt">StateAdapt.adapt</a>.</p><p><code>useAdapt</code> is like an advanced version of <a href="https://beta.reactjs.org/reference/react/useState" target="_blank" rel="noreferrer"><code>useState</code></a> or <a href="https://beta.reactjs.org/reference/react/useReducer" target="_blank" rel="noreferrer"><code>useReducer</code></a>. All of the values you pass into it are only used once, when the store is created. Any further updates to the store need to be done through the store itself (returned by <code>useAdapt</code> in the second position of the tuple) or indirectly through the sources passed into <code>useAdapt</code>.</p><h3 id="example-initialstate-only" tabindex="-1">Example: initialState only <a class="header-anchor" href="#example-initialstate-only" aria-label="Permalink to &quot;Example: initialState only&quot;">​</a></h3><p><code>useAdapt(initialState)</code></p><p><code>useAdapt</code> starts with very similar syntax to <code>useState</code>&#39;s. The main difference is that <code>state</code> is accessed as a property of the first tuple element. Also, the <code>setState</code> function has a <code>reset</code> property function that resets the store&#39;s state.</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> MyComponent</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">setName</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">] = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useAdapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;John&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows &quot;John&quot; first</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows &quot;Johnsh&quot; when the &quot;Set&quot; button is clicked</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows &quot;John&quot; again when the &quot;Reset&quot; button is clicked</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">  return</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> (</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">      &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">      &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#E50000;--shiki-light-font-style:inherit;"> onClick</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">=</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> setName</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;Johnsh&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">)</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">Set</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">      &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#E50000;--shiki-light-font-style:inherit;"> onClick</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">=</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> setName</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">reset</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">()</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">Reset</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  );</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><h3 id="example-using-an-adapter" tabindex="-1">Example: Using an adapter <a class="header-anchor" href="#example-using-an-adapter" aria-label="Permalink to &quot;Example: Using an adapter&quot;">​</a></h3><p><code>useAdapt(initialState, adapter)</code></p><p>You can also pass in a state Adapter object to customize the state change functions and selectors.</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> MyComponent</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">setName</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">] = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useAdapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;John&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">    concat</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> (</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">state</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">payload</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">: </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">string</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">) </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> state</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> + </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">payload</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    selectors</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">      length</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;"> state</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> state</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">length</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">    },</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows &#39;John&#39; and 4 first</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows &#39;Johnsh&#39; and 6 when the &quot;Concat&quot; button is clicked</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows &#39;John&#39; and 4 again when the &quot;Reset&quot; button is clicked</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">  return</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> (</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">      &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">      &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">length</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">      &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#E50000;--shiki-light-font-style:inherit;"> onClick</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">=</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> setName</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">concat</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;sh&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">)</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">Concat</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">      &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#E50000;--shiki-light-font-style:inherit;"> onClick</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">=</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> setName</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">reset</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">()</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">Reset</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  );</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><h3 id="example-using-adaptoptions" tabindex="-1">Example: Using AdaptOptions <a class="header-anchor" href="#example-using-adaptoptions" aria-label="Permalink to &quot;Example: Using AdaptOptions&quot;">​</a></h3><p><code>useAdapt(initialState, { adapter, sources, path })</code></p><p>You can also define an adapter, sources, and/or a state path as part of an AdaptOptions object.</p><p>Sources allow the store to declaratively react to external events rather than being commanded by imperative callback functions.</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> onTick</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">interval</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1000</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> MyComponent</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">clock</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">] = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useAdapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    adapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">      increment</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;"> state</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> state</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> + </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">    },</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    sources</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> onTick</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// or [onTick], or { set: onTick }, or { set: [onTick] }</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;clock&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows 0, 1, 2, 3, etc. every second</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">  return</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;"> &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">clock</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><p>When a store is subscribed to, it passes the subscriptions up to its sources. For example, if a store has an HTTP source, it will be triggered when the store receives its first subscriber, and it will be canceled when the store loses its last subscriber. <code>useAdapt</code> immediately subscribes.</p><p>There are 4 possible ways sources can be defined:</p><p>1. A source can be a single source or <a href="https://rxjs.dev/guide/observable" target="_blank" rel="noreferrer">Observable</a>&lt;<code>State</code>&gt;. When the source emits, it triggers the store&#39;s <code>set</code> method with the payload.</p><h4 id="example-single-source-or-observable" tabindex="-1">Example: Single source or observable <a class="header-anchor" href="#example-single-source-or-observable" aria-label="Permalink to &quot;Example: Single source or observable&quot;">​</a></h4><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> onNameChange</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">source</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">string</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> MyComponent</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">] = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useAdapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;John&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    sources</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> onNameChange</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;name&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows &#39;John&#39; first</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows &#39;Johnsh&#39; when the &quot;Set&quot; button is clicked</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">  return</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> (</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">      &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">      &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#E50000;--shiki-light-font-style:inherit;"> onClick</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">=</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> onNameChange</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;Johnsh&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">)</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">Set</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  );</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><p>2. A source can be an array of sources or <a href="https://rxjs.dev/guide/observable" target="_blank" rel="noreferrer">Observable</a>&lt;<code>State</code>&gt;. When any of the sources emit, it triggers the store&#39;s <code>set</code> method with the payload.</p><h4 id="example-array-of-sources-or-observables" tabindex="-1">Example: Array of sources or observables <a class="header-anchor" href="#example-array-of-sources-or-observables" aria-label="Permalink to &quot;Example: Array of sources or observables&quot;">​</a></h4><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> onNameChange</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">source</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">string</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&gt;();</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> onNameChange2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">source</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">string</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> MyComponent</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">] = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useAdapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;John&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    sources</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">onNameChange</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">onNameChange2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">],</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;name&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows &#39;John&#39; first</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows &#39;Johnsh&#39; when the &quot;Set&quot; button is clicked</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows &#39;Johnsh2&#39; when the &quot;Set2&quot; button is clicked</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">  return</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> (</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">      &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">      &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#E50000;--shiki-light-font-style:inherit;"> onClick</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">=</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> onNameChange</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;Johnsh&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">)</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">Set</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">      &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#E50000;--shiki-light-font-style:inherit;"> onClick</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">=</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> onNameChange2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;Johnsh2&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">)</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">Set2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  );</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><p>3. A source can be an object with keys that match the names of the Adapter state change functions, with a corresponding source or array of sources that trigger the store&#39;s reaction with the payload.</p><h4 id="example-object-of-sources-or-observables" tabindex="-1">Example: Object of sources or observables <a class="header-anchor" href="#example-object-of-sources-or-observables" aria-label="Permalink to &quot;Example: Object of sources or observables&quot;">​</a></h4><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> onNameChange</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">source</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">string</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&gt;();</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> onNameReset</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">source</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">void</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> MyComponent</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">] = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useAdapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;John&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    sources</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">      set</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> onNameChange</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">      reset</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">onNameReset</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">], </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// Can be array of sources too</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">    },</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;name&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows &#39;John&#39; first</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows &#39;Johnsh&#39; when the &quot;Set&quot; button is clicked</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows &#39;John&#39; again when the &quot;Reset&quot; button is clicked</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">  return</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> (</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">      &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">      &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#E50000;--shiki-light-font-style:inherit;"> onClick</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">=</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> onNameChange</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;Johnsh&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">)</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">Set</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">      &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#E50000;--shiki-light-font-style:inherit;"> onClick</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">=</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">onNameReset</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">Reset</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">button</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  );</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><p>4. A source can be a function that takes in a detached store (doesn&#39;t chain off of sources) and returns any of the above types of sources or observables.</p><h4 id="example-function-that-returns-an-observable" tabindex="-1">Example: Function that returns an observable <a class="header-anchor" href="#example-function-that-returns-an-observable" aria-label="Permalink to &quot;Example: Function that returns an observable&quot;">​</a></h4><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> MyComponent</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">] = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useAdapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;John&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">    sources</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;"> store</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> store</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">pipe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">      delay</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1000</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">),</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">      map</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">name</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> \`</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">\${</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">sh\`</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">),</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">      toSource</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;recursive onNameChange&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">),</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">    ),</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows &#39;John&#39; first</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Shows &#39;Johnsh&#39; after 1 second, then &#39;Johnshsh&#39; after 1 more second, etc.</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">  return</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;"> &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><p>Defining a path alongside sources is recommended to enable debugging with Redux DevTools. It&#39;s easy to trace singular state changes caused by user events, but it&#39;s much harder to trace state changes caused by RxJS streams.</p><p>The path string specifies the location in the global store you will find the state for the store being created (while the store has subscribers). StateAdapt splits this string at periods <code>&#39;.&#39;</code> to create an object path within the global store. Here are some example paths and the resulting global state objects:</p><h4 id="example-paths-and-global-state" tabindex="-1">Example: Paths and global state <a class="header-anchor" href="#example-paths-and-global-state" aria-label="Permalink to &quot;Example: Paths and global state&quot;">​</a></h4><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">states</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">store</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">] = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useAdapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;number&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> });</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// global state: { number: 0 }</span></span></code></pre></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">states</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">store</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">] = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useAdapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;featureA.number&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> });</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// global state: { featureA: { number: 0 } }</span></span></code></pre></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">states</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">store</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">] = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useAdapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;featureA.featureB.number&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> });</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// global state: { featureA: { featureB: { number: 0 } } }</span></span></code></pre></div><p>Each store completely owns its own state. If more than one store tries to use the same path, StateAdapt will throw this error:</p><p><code>Path &#39;\${path}&#39; collides with &#39;\${existingPath}&#39;, which has already been initialized as a state path.</code></p><p>This applies both to paths that are identical as well as paths that are subtrings of each other. For example, if <code>&#39;featureA&#39;</code> is already being used by a store and then another store tried to initialize at <code>&#39;featureA.number&#39;</code>, that error would be thrown.</p><p>To help avoid this error, StateAdapt provides a <a href="./../../core/src/getId.html">getId</a> function that can be used to generate unique paths:</p><h4 id="example-getid-for-unique-paths" tabindex="-1">Example: getId for unique paths <a class="header-anchor" href="#example-getid-for-unique-paths" aria-label="Permalink to &quot;Example: getId for unique paths&quot;">​</a></h4><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">getId</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;@state-adapt/core&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> path0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;number&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> + </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">getId</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> path1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;number&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> + </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">getId</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> MyComponent</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">states1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">store1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">] = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useAdapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> path0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> });</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">states2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">store2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">] = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useAdapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> path1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> });</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // global state: { number0: 0, number1: 0 }</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">  return</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;"> &lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">states1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> {</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">states2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000FF;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">div</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><h3 id="no-path" tabindex="-1">No path <a class="header-anchor" href="#no-path" aria-label="Permalink to &quot;No path&quot;">​</a></h3><p>If no path is provided, then the store&#39;s path defaults to the result of calling <a href="./../../core/src/getId.html">getId</a>.</p><h3 id="remember" tabindex="-1">Remember! <a class="header-anchor" href="#remember" aria-label="Permalink to &quot;Remember!&quot;">​</a></h3><p>The store needs to have subscribers in order to start managing state, and it only subscribes to sources when it has subscribers itself.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-label="Permalink to &quot;State&quot;">​</a></h3><p><code>State</code></p><h3 id="s" tabindex="-1">S <a class="header-anchor" href="#s" aria-label="Permalink to &quot;S&quot;">​</a></h3><p><code>S</code> <em>extends</em> <code>Selectors</code>&lt;<code>State</code>&gt;</p><h3 id="r" tabindex="-1">R <a class="header-anchor" href="#r" aria-label="Permalink to &quot;R&quot;">​</a></h3><p><code>R</code> <em>extends</em> <code>ReactionsWithSelectors</code>&lt;<code>State</code>, <code>S</code>&gt;</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="initialstate" tabindex="-1">initialState <a class="header-anchor" href="#initialstate" aria-label="Permalink to &quot;initialState&quot;">​</a></h3><p><code>State</code></p><h3 id="second" tabindex="-1">second <a class="header-anchor" href="#second" aria-label="Permalink to &quot;second&quot;">​</a></h3><p><code>R</code> &amp; <code>object</code> &amp; <code>NotAdaptOptions</code> | <code>AdaptOptions</code>&lt;<code>State</code>, <code>S</code>, <code>R</code>&gt;</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>ProxyStoreTuple</code>&lt;<code>State</code>, <code>InitializedSmartStore</code>&lt;<code>State</code>, <code>S</code>, <code>R</code>&gt;&gt;</p>`,62)]))}const o=i(h,[["render",e]]);export{g as __pageData,o as default};
