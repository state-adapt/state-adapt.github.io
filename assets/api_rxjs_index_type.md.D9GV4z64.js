import{_ as s,c as e,o as i,ag as t}from"./chunks/framework.Zc4NuDMF.js";const c=JSON.parse('{"title":"Function: type()","description":"","frontmatter":{},"headers":[],"relativePath":"api/rxjs/index/type.md","filePath":"api/rxjs/index/type.md"}'),r={name:"api/rxjs/index/type.md"};function n(p,a,l,h,o,d){return i(),e("div",null,a[0]||(a[0]=[t(`<h1 id="function-type" tabindex="-1">Function: type() <a class="header-anchor" href="#function-type" aria-label="Permalink to &quot;Function: type()&quot;">​</a></h1><blockquote><p><strong>type</strong>(<code>type</code>): &lt;<code>T</code>&gt;(<code>source$</code>) =&gt; <code>T</code> &amp; <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/state-adapt/state-adapt/blob/4ff8540684d6d76a52452612f8fa44ffd7c6016a/libs/rxjs/src/lib/sources/type.operator.ts#L21" target="_blank" rel="noreferrer">libs/rxjs/src/lib/sources/type.operator.ts:21</a></p><p><code>type</code> is a custom RxJS <a href="https://rxjs.dev/guide/operators" target="_blank" rel="noreferrer">operator</a> that mutates an RxJS <a href="https://rxjs.dev/guide/observable" target="_blank" rel="noreferrer">Observable</a> by setting a <code>type</code> property. It takes one argument, which will appear as the action type in Redux DevTools:</p><p><img src="https://state-adapt.github.io/assets/devtools-timer$.png" alt="Action Type in Redux Devtools"></p><h4 id="example-converting-an-observable-into-a-source" tabindex="-1">Example: Converting an observable into a source <a class="header-anchor" href="#example-converting-an-observable-into-a-source" aria-label="Permalink to &quot;Example: Converting an observable into a source&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">timer</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;rxjs&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">type</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;@state-adapt/rxjs&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> timer$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">timer</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1000</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">).</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">pipe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">type</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;timer$&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">timer$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">console</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">log</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// 0</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type&quot;">​</a></h3><p><code>string</code></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><blockquote><p>&lt;<code>T</code>&gt;(<code>source$</code>): <code>T</code> &amp; <code>object</code></p></blockquote><h3 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h3><h4 id="t" tabindex="-1">T <a class="header-anchor" href="#t" aria-label="Permalink to &quot;T&quot;">​</a></h4><p><code>T</code></p><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><h4 id="source" tabindex="-1">source$ <a class="header-anchor" href="#source" aria-label="Permalink to &quot;source$&quot;">​</a></h4><p><code>T</code></p><h3 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><code>T</code> &amp; <code>object</code></p>`,20)]))}const y=s(r,[["render",n]]);export{c as __pageData,y as default};
