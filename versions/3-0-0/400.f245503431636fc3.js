"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[400],{7400:(l,a,e)=>{e.r(a),e.d(a,{GetStartedSolidJsComponent:()=>p});var r=e(1917),i=e(2309),t=e(4650);let p=(()=>{class n{constructor(){this.html='<h2 id="tutorials">Tutorials</h2>\n<p><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/solid-js#1-start-with-simple-state\'})); void(0)">Basic Syntax</a></p>\n<h2 id="documentation">Documentation</h2>\n<p>SolidJS doesn&#39;t currently have a dedicated library from StateAdapt, but it will. For now, see <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs\'})); void(0)">@state-adapt/rxjs</a>.</p>\n\x3c!-- [@state-adapt/solid-js](/docs/solid-js) --\x3e\n\n<h2 id="setup">Setup</h2>\n<p><a href="https://stackblitz.com/edit/solidjs-templates-oc7ivf?file=src%2Fadapt.function.ts">StackBlitz demo</a></p>\n<p>First, <code>npm install</code>:</p>\n<pre><code>npm i -s rxjs\nnpm i -s @state-adapt/{core,rxjs}\n</code></pre>\n<p>Configure StateAdapt in a file named <code>state-adapt.ts</code>:</p>\n<pre><code class="language-typescript">// state-adapt.ts\nimport { actionSanitizer, stateSanitizer } from &#39;@state-adapt/core&#39;;\nimport { configureStateAdapt } from &#39;@state-adapt/rxjs&#39;;\n\nconst enableReduxDevTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__?.({\n  actionSanitizer,\n  stateSanitizer,\n});\n\nexport const { adapt, watch } = configureStateAdapt({\n  devtools: enableReduxDevTools,\n});\n</code></pre>\n<p>And now you can use it in your components:</p>\n<pre><code class="language-tsx">import { adapt } from &#39;../state-adapt.function&#39;;\nconst nameStore = adapt(&#39;Bob&#39;);\n</code></pre>\n<p>Additionally, you can create this helper function to get objects with only signals from stores:</p>\n<pre><code class="language-typescript">// from-adapt.function.ts\nimport { SmartStore } from &#39;@state-adapt/rxjs&#39;;\nimport { Observable } from &#39;rxjs&#39;;\nimport { Accessor, from } from &#39;solid-js&#39;;\n\ntype StoreSignals&lt;Store extends SmartStore&lt;any, any&gt;&gt; = {\n  [K in keyof Store as K extends `${infer SelectorName}$`\n    ? SelectorName\n    : never]: Accessor&lt;Store[K] extends Observable&lt;infer T&gt; ? T : never&gt;;\n};\n\nexport function fromAdapt&lt;Store extends SmartStore&lt;any, any&gt;&gt;(\n  store: Store,\n): StoreSignals&lt;Store&gt; {\n  const signals = {} as any;\n  for (const prop in store) {\n    const lenWithoutLast = prop.length - 1;\n    if (prop.charAt(lenWithoutLast) !== &#39;$&#39;) continue;\n    const selectorName = prop.slice(0, lenWithoutLast);\n    signals[selectorName] = from((store as any)[prop]);\n  }\n  return signals;\n}\n</code></pre>\n<p>SolidJS&#39; <code>from</code> function immediately subscribes to observables, so it&#39;s good to use it in components. You can use it like this:</p>\n<pre><code class="language-tsx">import { adapt } from &#39;../adapt.function&#39;;\nimport { fromAdapt } from &#39;../from-adapt.function&#39;;\n\nconst nameStore = adapt(&#39;Bob&#39;);\n\nexport function Counter() {\n  const name = fromAdapt(nameStore);\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{name.state()}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; nameStore.set(&#39;new name&#39;)}&gt;Set Name&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n<p>SolidJS doesn&#39;t currently have a dedicated library from StateAdapt, but it will. For now, for more configuration options, see <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs\'})); void(0)">@state-adapt/rxjs</a>.</p>\n\x3c!-- For more configuration options, see [@state-adapt/solid-js](/docs/solid-js). --\x3e\n\n<p>Go to <a href="solid-js/get-started#tutorials">Tutorials</a> for help on how to use StateAdapt after setup.</p>\n'}}return n.\u0275fac=function(o){return new(o||n)},n.\u0275cmp=t.Xpm({type:n,selectors:[["sa-get-started-solid-js"]],standalone:!0,features:[t.jDz],decls:2,vars:1,consts:[[3,"html"]],template:function(o,c){1&o&&(t.TgZ(0,"sa-content"),t._UZ(1,"sa-html",0),t.qZA()),2&o&&(t.xp6(1),t.Q6J("html",c.html))},dependencies:[i.S,r.XB],encapsulation:2}),n})()}}]);