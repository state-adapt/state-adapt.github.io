"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[170],{5170:(u,r,n)=>{n.r(r),n.d(r,{GettingStartedComponent:()=>d});var o=n(1496),p=n(2309),t=n(5e3);let d=(()=>{class e{constructor(){this.md="# Getting Started\n\nSet up StateAdapt with\n\n- [Angular](#angular)\n- [Angular and NgRx](#angular-and-ngrx)\n- [Angular and NGXS](#angular-and-ngxs)\n- [React](#react)\n- [React and Redux](#react-and-redux)\n\n## Angular\n\n[StackBlitz Demo](https://stackblitz.com/github/state-adapt/state-adapt/tree/stackblitz-ng-sa-counter?file=apps%2Fng-sa-counter%2Fsrc%2Fapp%2Fapp.module.ts)\n\nFirst, `npm install`:\n\n```\nnpm i -s @state-adapt/core reselect\n```\n\nInclude in app.module.ts like so:\n\n```typescript\nimport {\n  createStore,\n  actionSanitizer,\n  stateSanitizer,\n  AdaptCommon,\n} from '@state-adapt/core';\n// ...\n// Create the Adapt store:\nconst enableReduxDevTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__?.({\n  actionSanitizer,\n  stateSanitizer,\n});\n// ...\n// Provide it:\n    providers: [{provide: AdaptCommon, useValue: createStore(enableReduxDevTools)}],\n```\n\nNow you can use it in a component or service. Here's an example in a component:\n\n```typescript\nimport { Source, createAdapter, AdaptCommon } from '@state-adapt/core';\n...\n  newStr$ = new Source<string>('newStr$');\n  stringAdapter = createAdapter<string>()({\n    append: (state, newStr: string) => state + newStr,\n  });\n  stringStore = this.adapt.init(['string', this.stringAdapter, ''], {\n    append: this.newStr$,\n  });\n  str$ = this.stringStore.getState();\n  constructor(private adapt: AdaptCommon<any>) {\n    this.str$.subscribe();\n    setTimeout(() => this.newStr$.next('Hello World!'), 3000);\n  }\n...\n```\n\nOpen up Redux Devtools and you should see the state update after 3 seconds.\n\n## Angular and NgRx\n\n[StackBlitz Demo](https://stackblitz.com/github/state-adapt/state-adapt/tree/stackblitz-ng-sa-ngrx-counter?file=apps%2Fng-sa-ngrx-counter%2Fsrc%2Fapp%2Fapp.module.ts)\n\nFirst, `npm install`:\n\n```\nnpm i -s @state-adapt/core @state-adapt/ngrx reselect\n```\n\nInclude in your app.module.ts like so:\n\n```typescript\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport {\n  adaptReducer,\n  actionSanitizer,\n  stateSanitizer,\n} from '@state-adapt/core';\n// ...\n// In your module imports array:\n    StoreModule.forRoot({ adapt: adaptReducer }),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25,\n      logOnly: environment.production,\n      actionSanitizer,\n      stateSanitizer,\n    }),\n```\n\nNow you can use it in a component or service. Here's an example in a component:\n\n```typescript\nimport { Source, createAdapter } from '@state-adapt/core';\nimport { Adapt } from '@state-adapt/ngrx';\n...\n  newStr$ = new Source<string>('newStr$');\n  stringAdapter = createAdapter<string>()({\n    append: (state, newStr: string) => state + newStr,\n  });\n  stringStore = this.adapt.init(['string', this.stringAdapter, ''], {\n    append: this.newStr$,\n  });\n  str$ = this.stringStore.getState();\n  constructor(private adapt: Adapt) {\n    this.str$.subscribe();\n    setTimeout(() => this.newStr$.next('Hello World!'), 3000);\n  }\n...\n```\n\nOpen up Redux Devtools and you should see the state update after 3 seconds.\n\n## Angular and NGXS\n\n[StackBlitz Demo](https://stackblitz.com/github/state-adapt/state-adapt/tree/stackblitz-ng-sa-ngxs-counter?file=apps%2Fng-sa-ngxs-counter%2Fsrc%2Fapp%2Fapp.module.ts)\n\nFirst, `npm install`:\n\n```\nnpm i -s @state-adapt/core @state-adapt/ngxs reselect\n```\n\nInclude in your app.module.ts like so:\n\n```typescript\nimport { NgxsModule } from '@ngxs/store';\nimport { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';\nimport { actionSanitizer, stateSanitizer } from '@state-adapt/core';\nimport { AdaptState } from '@state-adapt/ngxs';\n// ...\n// In your module imports array:\n    NgxsModule.forRoot([AdaptState], {\n      developmentMode: !environment.production\n    }),\n    NgxsReduxDevtoolsPluginModule.forRoot({\n      disabled: environment.production,\n      actionSanitizer,\n      stateSanitizer,\n    }),\n```\n\nNow you can use it in a component or service. Here's an example in a component:\n\n```typescript\nimport { Source, createAdapter } from '@state-adapt/core';\nimport { Adapt } from '@state-adapt/ngxs';\n...\n  newStr$ = new Source<string>('newStr$');\n  stringAdapter = createAdapter<string>()({\n    append: (state, newStr: string) => state + newStr,\n  });\n  stringStore = this.adapt.init(['string', this.stringAdapter, ''], {\n    append: this.newStr$,\n  });\n  str$ = this.stringStore.getState();\n  constructor(private adapt: Adapt) {\n    this.str$.subscribe();\n    setTimeout(() => this.newStr$.next('Hello World!'), 3000);\n  }\n...\n```\n\nOpen up Redux Devtools and you should see the state update after 3 seconds.\n\n# React\n\n[StackBlitz Demo](https://stackblitz.com/edit/state-adapt-react)\n\nFirst, `npm install`:\n\n```\nnpm i -s @state-adapt/core @state-adapt/react\n```\n\nDefine your adapt store:\n\n```typescript\nimport {\n  actionSanitizer,\n  stateSanitizer,\n  createStore,\n} from '@state-adapt/core';\n\nconst enableReduxDevTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__?.({\n  actionSanitizer,\n  stateSanitizer,\n});\nexport const adapt = createStore(enableReduxDevTools);\n```\n\nProvide StateAdapt in your app context:\n\n```tsx\nimport { AdaptContext } from '@state-adapt/react';\nimport { adapt, store } from './store';\n// ...\n  <AdaptContext.Provider value={adapt}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </AdaptContext.Provider>,\n```\n\nAnd now you can use it in your components:\n\n```tsx\nimport { createAdapter } from '@state-adapt/core';\nimport { useSource, useAdapter, useObservable } from '@state-adapt/react';\n\nconst stringAdapter = createAdapter<string>()({\n  append: (state, newStr: string) => state + newStr,\n});\n\nexport function App() {\n  const newStr$ = useSource<string>('newStr$');\n  const stringStore = useAdapter(['string', stringAdapter, ''], {\n    append: this.newStr$,\n  });\n  cost str$ = stringStore.getState();\n  const str = useObservable(str$);\n\n  return (\n    <h1>{str}</h1>\n    <button onClick={() => newStr$.next('new string ')}>New String</button>\n  )\n}\n```\n\n# React and Redux\n\n[StackBlitz Demo](https://stackblitz.com/edit/state-adapt-react-with-redux)\n\nFirst, `npm install`:\n\n```\nnpm i -s @state-adapt/core @state-adapt/react\n```\n\nDefine your Redux store:\n\n```typescript\nimport {\n  adaptReducer,\n  actionSanitizer,\n  stateSanitizer,\n  createStateAdapt,\n} from '@state-adapt/core';\nimport { combineReducers, createStore } from 'redux';\n\nconst enableReduxDevTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__?.({\n  actionSanitizer,\n  stateSanitizer,\n});\n\nexport const store = createStore(\n  combineReducers({\n    adapt: adaptReducer,\n    // Any other reducers you have with Redux\n  }),\n  enableReduxDevTools,\n);\nexport const adapt = createStateAdapt(store);\n```\n\nProvide StateAdapt in your app context:\n\n```tsx\nimport { Provider } from 'react-redux';\nimport { AdaptContext } from '@state-adapt/react';\nimport { adapt, store } from './store';\n// ...\n  <AdaptContext.Provider value={adapt}>\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>\n  </AdaptContext.Provider>,\n```\n\nAnd now you can use it in your components:\n\n```tsx\nimport { createAdapter } from '@state-adapt/core';\nimport { useSource, useAdapter, useObservable } from '@state-adapt/react';\n\nconst stringAdapter = createAdapter<string>()({\n  append: (state, newStr: string) => state + newStr,\n});\n\nexport function App() {\n  const newStr$ = useSource<string>('newStr$');\n  const stringStore = useAdapter(['string', stringAdapter, ''], {\n    append: this.newStr$,\n  });\n  cost str$ = stringStore.getState();\n  const str = useObservable(str$);\n\n  return (\n    <h1>{str}</h1>\n    <button onClick={() => newStr$.next('new string ')}>New String</button>\n  )\n}\n```\n"}}return e.\u0275fac=function(a){return new(a||e)},e.\u0275cmp=t.Xpm({type:e,selectors:[["state-adapt-getting-started"]],standalone:!0,features:[t.jDz],decls:2,vars:1,consts:[[3,"data"]],template:function(a,c){1&a&&(t.TgZ(0,"state-adapt-content"),t._UZ(1,"markdown",0),t.qZA()),2&a&&(t.xp6(1),t.Q6J("data",c.md))},dependencies:[p.S,o.JP,o.lF],encapsulation:2}),e})()}}]);