import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.DjwDO6w3.js";const c=JSON.parse('{"title":"Function: splitRequestSources()","description":"","frontmatter":{},"headers":[],"relativePath":"api/rxjs/index/splitRequestSources.md","filePath":"api/rxjs/index/splitRequestSources.md"}'),n={name:"api/rxjs/index/splitRequestSources.md"};function h(l,s,p,k,r,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="function-splitrequestsources" tabindex="-1">Function: splitRequestSources() <a class="header-anchor" href="#function-splitrequestsources" aria-label="Permalink to &quot;Function: splitRequestSources()&quot;">​</a></h1><blockquote><p><strong>splitRequestSources</strong>&lt;<code>TypePrefix</code>, <code>A</code>&gt;(<code>typePrefix</code>, <code>obs$</code>): <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/state-adapt/state-adapt/blob/4ff8540684d6d76a52452612f8fa44ffd7c6016a/libs/rxjs/src/lib/sources/split-request-sources.function.ts#L89" target="_blank" rel="noreferrer">libs/rxjs/src/lib/sources/split-request-sources.function.ts:89</a></p><p><code>splitRequestSources</code> is a function that takes in a <a href="#splitrequestsourcestypeprefix">TypePrefix</a> and an <a href="https://rxjs.dev/guide/observable" target="_blank" rel="noreferrer">Observable</a> with values of type</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">| { type: </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">\`</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">\${</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">TypePrefix</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">.success$\`</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; payload: </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">Payload</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">| { type: </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">\`</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">\${</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">TypePrefix</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">.error$\`</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; payload: </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">any</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> }</span></span></code></pre></div><p>and returns an object with <code>success$</code> and <code>error$</code> propeties.</p><p>The <code>success$</code> property is an observable of values of type</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">{ type: </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">\`</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">\${</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">TypePrefix</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">.success$\`</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; payload: </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">Payload</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> }</span></span></code></pre></div><p>The <code>error$</code> property is an observable of values of type</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">{ type: </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">\`</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">\${</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">TypePrefix</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">.error$\`</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">; payload: </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">any</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> }</span></span></code></pre></div><h4 id="example-convert-an-http-post-observable-into-success-and-error-sources" tabindex="-1">Example: Convert an HTTP POST observable into success$ and error$ sources <a class="header-anchor" href="#example-convert-an-http-post-observable-into-success-and-error-sources" aria-label="Permalink to &quot;Example: Convert an HTTP POST observable into success$ and error$ sources&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">exhaustMap</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;rxjs&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">ajax</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;rxjs/ajax&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">splitRequestSources</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,  </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">toRequestSource</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;@state-adapt/rxjs&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> deleteTodo$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">source</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">number</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> deleteTodoRequest$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">deleteTodo$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">pipe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  exhaustMap</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">((</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">id</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">) </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">    ajax</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">({</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">      url</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> \`https://jsonplaceholder.typicode.com/todos/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">\${</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">id</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">\`</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">      method</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;DELETE&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">    }).</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">pipe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">toRequestSource</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;todo.delete&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">))</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  )</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> deleteTodoRequest</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">splitRequestSources</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;todo.delete&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">deleteTodoRequest$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">todoRequest</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">success$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">console</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">log</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">todoRequest</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">error$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">console</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">log</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">deleteTodo$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">next</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// { type: &#39;todo.delete.success$&#39;, payload: AjaxResponse{…} }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">deleteTodo$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">next</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#0000FF;">Infinity</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// { type: &#39;todo.delete.error$&#39;, payload: &#39;AjaxErrorImpl{…} }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">deleteTodo$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">next</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// { type: &#39;todo.delete.success$&#39;, payload: AjaxResponse{…} }</span></span></code></pre></div><p>The main stream is not killed because <code>toRequestSource</code> operates on the request observable instead of the outer observable.</p><h4 id="example-splitting-an-observable-of-request-actions-into-success-and-error-sources" tabindex="-1">Example: Splitting an observable of request actions into success$ and error$ sources <a class="header-anchor" href="#example-splitting-an-observable-of-request-actions-into-success-and-error-sources" aria-label="Permalink to &quot;Example: Splitting an observable of request actions into success$ and error$ sources&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">interval</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;rxjs&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">splitRequestSources</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">toRequestSource</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;@state-adapt/rxjs&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> interval$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">interval</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1000</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">).</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">pipe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  map</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">n</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> n</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> &lt; </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">2</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#000000;"> ?</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> n</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#000000;"> :</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> n</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">fakeNumberMethod</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">()),</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  toRequestSource</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;interval&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">),</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">success$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">error$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">splitRequestSources</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;interval&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">interval$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">success$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">console</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">log</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// { type: &#39;interval.success$&#39;, payload: 0 }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// { type: &#39;interval.success$&#39;, payload: 1 }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// End</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">error$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">console</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">log</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// { type: &#39;interval.error$&#39;, payload: &#39;Error: n.fakeNumberMethod is not a function&#39; }</span></span></code></pre></div><p>The main stream is killed because <code>toRequestSource</code> operates directly on it instead of on an inner observable.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="typeprefix" tabindex="-1">TypePrefix <a class="header-anchor" href="#typeprefix" aria-label="Permalink to &quot;TypePrefix&quot;">​</a></h3><p><code>TypePrefix</code> <em>extends</em> <code>string</code></p><h3 id="a" tabindex="-1">A <a class="header-anchor" href="#a" aria-label="Permalink to &quot;A&quot;">​</a></h3><p><code>A</code> <em>extends</em> <a href="./../../core/src/Action.html"><code>Action</code></a>&lt;<code>any</code>, <code>\`\${TypePrefix}.success$\`</code> | <code>\`\${TypePrefix}.error$\`</code>&gt;</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="typeprefix-1" tabindex="-1">typePrefix <a class="header-anchor" href="#typeprefix-1" aria-label="Permalink to &quot;typePrefix&quot;">​</a></h3><p><code>TypePrefix</code></p><h3 id="obs" tabindex="-1">obs$ <a class="header-anchor" href="#obs" aria-label="Permalink to &quot;obs$&quot;">​</a></h3><p><code>Observable</code>&lt;<code>A</code>&gt;</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>object</code></p><h3 id="error" tabindex="-1">error$ <a class="header-anchor" href="#error" aria-label="Permalink to &quot;error$&quot;">​</a></h3><blockquote><p><strong>error$</strong>: <code>Observable</code>&lt;<a href="./../../core/src/Action.html"><code>Action</code></a>&lt;<code>any</code>, <code>\`\${TypePrefix}.error$\`</code>&gt;&gt;</p></blockquote><h3 id="success" tabindex="-1">success$ <a class="header-anchor" href="#success" aria-label="Permalink to &quot;success$&quot;">​</a></h3><blockquote><p><strong>success$</strong>: <code>Observable</code>&lt;<code>A</code> <em>extends</em> <a href="./../../core/src/Action.html"><code>Action</code></a>&lt;<code>Payload</code>, <code>\`\${TypePrefix}.success$\`</code>&gt; ? <a href="./../../core/src/Action.html"><code>Action</code></a>&lt;<code>Payload</code>, <code>\`\${TypePrefix}.success$\`</code>&gt; : <code>never</code>&gt;</p></blockquote>`,32)]))}const F=i(n,[["render",h]]);export{c as __pageData,F as default};
