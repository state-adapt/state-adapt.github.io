import{C as e}from"./chunks/Counter.QnXZWbUs.js";import{c as t,o as n,ag as i,j as a,G as l}from"./chunks/framework.Zc4NuDMF.js";const h={class:"info custom-block"},c=JSON.parse('{"title":"The Reactivity Rule","description":"","frontmatter":{},"headers":[],"relativePath":"guide/thinking-reactively/the-reactivity-rule.md","filePath":"guide/thinking-reactively/the-reactivity-rule.md"}'),p={name:"guide/thinking-reactively/the-reactivity-rule.md"},g=Object.assign(p,{setup(k){return(d,s)=>(n(),t("div",null,[s[1]||(s[1]=i('<h1 id="the-reactivity-rule" tabindex="-1">The Reactivity Rule <a class="header-anchor" href="#the-reactivity-rule" aria-label="Permalink to &quot;The Reactivity Rule&quot;">​</a></h1><h2 id="everything-that-can-be-derived-should-be-derived" tabindex="-1">Everything that can be derived should be derived. <a class="header-anchor" href="#everything-that-can-be-derived-should-be-derived" aria-label="Permalink to &quot;Everything that can be derived should be derived.&quot;">​</a></h2><h3 id="other-ways-of-saying-this" tabindex="-1">Other ways of saying this <a class="header-anchor" href="#other-ways-of-saying-this" aria-label="Permalink to &quot;Other ways of saying this&quot;">​</a></h3><ul><li>Don&#39;t duplicate state.</li><li>Everything possible should react.</li><li>All code should be as far downstream as possible.</li><li>All code should be as local as possible.</li><li>All code should be declarative.</li><li>No code should be imperative.</li><li>Don&#39;t create event handlers or callback functions.</li><li>All data flow should be unidirectional.</li></ul><p>Learn more about these definitions <a href="./imperative-trap.html">here</a>.</p><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><p>Think about how you would code this counter:</p>',7)),a("div",h,[s[0]||(s[0]=a("p",{class:"custom-block-title"},"COUNTER",-1)),l(e)]),s[2]||(s[2]=i(`<p>You can see the similarities between <code>Count</code> and <code>Double</code>, right? <code>Double</code> changes along with <code>Count</code>, and it is always twice the value of <code>Count</code>. That means it can be derived from <code>Count</code>. So, it should be derived from <code>Count</code>:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">p</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">Double: </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">{</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> *</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;"> 2</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#800000;">p</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#800000;">&gt;</span></span></code></pre></div><p>Developers used to put this kind of logic inside event handlers.</p><p>If <code>Double</code> were instead <code>Debounced</code>, many developers today would still put its logic in a callback function inside a <code>setTimeout</code> and probably a <code>useEffect</code>.</p><p>But RxJS or custom React hooks (or signals) allow deriving <code>Debounced</code> instead:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> debouncedCount</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useDebounce</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">count</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1000</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span></code></pre></div><details class="details custom-block"><summary><code>useDebounce</code></summary><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">function</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;"> useDebounce</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">T</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&gt;(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">value</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">: </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">T</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">delay</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">: </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">number</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">) {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  const</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">debouncedValue</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;">setDebouncedValue</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">] = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">useState</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">value</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  useEffect</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">    const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> handler</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">setTimeout</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(() </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">      setDebouncedValue</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">value</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">    }, </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">delay</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">    return</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> () </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">      clearTimeout</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">handler</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">    };</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }, [</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">value</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">delay</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">  return</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> debouncedValue</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><p>Reactivity often hides internal imperative code. Reactivity is not like function purity: Pure functions can&#39;t call impure functions, but reactive expressions can call functions that contain imperative code, as long as it&#39;s only modifying declarations from its own scope.</p></details>`,7))]))}});export{c as __pageData,g as default};
