"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[870],{2870:(d,o,t)=>{t.r(o),t.d(o,{ConceptsOverviewComponent:()=>p});var n=t(6087),i=t(1917),r=t(2309),e=t(4650);let p=(()=>{class s{constructor(){this.html='<h1 id="stateadapt-conceptual-overview">StateAdapt Conceptual Overview</h1>\n<p>StateAdapt has 3 main concepts: Sources, adapters and stores.</p>\n<h2 id="sources"><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/concepts/sources\'})); void(0)">Sources</a></h2>\n<p><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/concepts/sources\'})); void(0)">Sources</a> are where asynchronous data enters applications. Examples are</p>\n<ul class="bx--list--unordered"><li class="bx--list__item">User input</li><li class="bx--list__item">Data arriving from a server</li><li class="bx--list__item">A timer completing</li></ul><h2 id="adapters"><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/concepts/adapters\'})); void(0)">Adapters</a></h2>\n<p><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/concepts/adapters\'})); void(0)">Adapters</a> are objects containing 2 kinds of reusable state management patterns:</p>\n<ul class="bx--list--unordered"><li class="bx--list__item">State changes (pure functions that implement ways state can change)</li><li class="bx--list__item">Selectors (pure functions that calculate derived state or just return a specific piece of state)</li></ul><h2 id="stores"><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/concepts/stores\'})); void(0)">Stores</a></h2>\n<p><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/concepts/stores\'})); void(0)">Stores</a> do 4 things:</p>\n<ul class="bx--list--unordered"><li class="bx--list__item">Define initial state and an adapter to manage it</li><li class="bx--list__item">Connect sources to adapter state changes</li><li class="bx--list__item">Use the adapter&#39;s selectors to create observables of the selectors&#39; results. These observables chain off the sources so subscriptions are propagated</li><li class="bx--list__item">Use the adapter&#39;s state changes to create synthetic sources for simple, single-store state changes. These are made available as part of the store, so DOM event handlers can call them. See <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/concepts/sources#synthetic-sources\'})); void(0)">Synthetic Sources</a>.</li></ul>'}}return s.\u0275fac=function(a){return new(a||s)},s.\u0275cmp=e.Xpm({type:s,selectors:[["sa-concepts-overview"]],standalone:!0,features:[e.jDz],decls:5,vars:1,consts:[[3,"html"],["routerLink","/concepts/sources"]],template:function(a,u){1&a&&(e.TgZ(0,"sa-content"),e._UZ(1,"sa-html",0),e.TgZ(2,"h2")(3,"a",1),e._uU(4,"Next: Sources"),e.qZA()()()),2&a&&(e.xp6(1),e.Q6J("html",u.html))},dependencies:[n.Bz,n.yS,r.S,i.XB],encapsulation:2}),s})()}}]);