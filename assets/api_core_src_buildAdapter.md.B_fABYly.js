import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.Zc4NuDMF.js";const c=JSON.parse('{"title":"Function: buildAdapter()","description":"","frontmatter":{},"headers":[],"relativePath":"api/core/src/buildAdapter.md","filePath":"api/core/src/buildAdapter.md"}'),n={name:"api/core/src/buildAdapter.md"};function l(h,s,p,r,k,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="function-buildadapter" tabindex="-1">Function: buildAdapter() <a class="header-anchor" href="#function-buildadapter" aria-label="Permalink to &quot;Function: buildAdapter()&quot;">​</a></h1><blockquote><p><strong>buildAdapter</strong>&lt;<code>State</code>&gt;(): &lt;<code>S</code>, <code>R</code>&gt;(<code>reactionsWithSelectors</code>) =&gt; <code>NewBlockAdder</code>&lt;<code>State</code>, <code>WithStateSelector</code>&lt;<code>State</code>, <code>S</code>&gt;, <code>ReactionsWithoutSelectors</code>&lt;<code>State</code>, <code>R</code> &amp; <code>BasicAdapterMethods</code>&lt;<code>State</code>&gt;&gt;&gt;</p></blockquote><p>Defined in: <a href="https://github.com/state-adapt/state-adapt/blob/4ff8540684d6d76a52452612f8fa44ffd7c6016a/libs/core/src/lib/adapters/build-adapter.function.ts#L110" target="_blank" rel="noreferrer">src/lib/adapters/build-adapter.function.ts:110</a></p><p><code>buildAdapter</code> is called with an initial adapter, then can be called again and again with more objects inheriting from previous objects, until a final empty call <code>()</code> to get the final built adapter:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">buildAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;@state-adapt/core&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">numberAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;./number.adapter&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> numberStringAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">buildAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">number</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&gt;()(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">numberAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">)({</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Define more selectors</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">})(([</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">selectors</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">reactions</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">]) </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> ({</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Define more state changes</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}))({</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">  // Define grouped state changes</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">})(); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// End</span></span></code></pre></div><p>The first call creates a new object, but after that, every object passed in is looped over and used to mutate the original new object.</p><p>buildAdapter takes 3 possible arguments in each call (after the first):</p><ol><li>A selectors object</li><li>A function taking in a tuple of <code>[selectors, reactions]</code> and returning new reactions</li><li>A nested object defining grouped state reactions</li></ol><h3 id="_1-selectors" tabindex="-1">1. Selectors <a class="header-anchor" href="#_1-selectors" aria-label="Permalink to &quot;1. Selectors&quot;">​</a></h3><p><code>buildAdapter</code> provides full selector memoization and a default <code>state</code> selector (after the first call). The selectors defined in the first call each receive a state object to select against. Each subsequent selector block has access to all selectors previously defined. To return all the selectors combined into an adapter, call it a final time with no parameter.</p><h4 id="example-basic-selectors" tabindex="-1">Example: Basic selectors <a class="header-anchor" href="#example-basic-selectors" aria-label="Permalink to &quot;Example: Basic selectors&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">buildAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;@state-adapt/core&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> stringAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">buildAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">string</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&gt;()({})({</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  reverse</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;"> s</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> s</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">split</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">).</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">reverse</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">().</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">join</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">),</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">})({</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  isPalendrome</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;"> s</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> s</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">reverse</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> === </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">s</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">})();</span></span></code></pre></div><p><code>s</code> is typed as an object with properties with the same names as all the selectors defined previously, and typed with each corresponding selector&#39;s return type. Internally, <code>buildAdapter</code> uses a <code>Proxy</code> to detect which selectors your new selector functions are accessing in order memoize them efficiently.</p><h3 id="_2-reactions" tabindex="-1">2. Reactions <a class="header-anchor" href="#_2-reactions" aria-label="Permalink to &quot;2. Reactions&quot;">​</a></h3><h4 id="example-basic-reactions" tabindex="-1">Example: Basic Reactions <a class="header-anchor" href="#example-basic-reactions" aria-label="Permalink to &quot;Example: Basic Reactions&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">buildAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;@state-adapt/core&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">numberAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;./number.adapter&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> numberStringAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">buildAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">number</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&gt;()(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">numberAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">)({</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  negativeStr</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;"> s</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> s</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">negative</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">toString</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(),</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">})(([</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">selectors</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">reactions</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">]) </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> ({</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  setToNegative</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;"> state</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> selectors</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">negative</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">),</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}))();</span></span></code></pre></div><p><code>setToNegative</code> becomes a reaction on <code>numberStringAdapter</code> that multiplies the state by <code>-1</code> (the return of <code>selectors.negative(state)</code>).</p><p>Selectors used when defining new reactions must be called as functions and will not be memoized. If efficiency is critical, you might want to put the derived state in the action payload for the state change.</p><h3 id="_3-grouped-reactions" tabindex="-1">3. Grouped Reactions <a class="header-anchor" href="#_3-grouped-reactions" aria-label="Permalink to &quot;3. Grouped Reactions&quot;">​</a></h3><p>The nested object defining grouped state reactions is for nested states. In the following example, a group state reaction called <code>setBothNumbers</code> will set both <code>coolNumber</code> and <code>weirdNumber</code> to the same payload passed into the new <code>setBothNumbers</code> reaction.</p><h4 id="example-grouped-reactions" tabindex="-1">Example: Grouped Reactions <a class="header-anchor" href="#example-grouped-reactions" aria-label="Permalink to &quot;Example: Grouped Reactions&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">const</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0070C1;"> numbersAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">buildAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">NumbersState</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&gt;()({</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  setCoolNumber</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> (</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">state</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">newCoolNumber</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">: </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">number</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">) </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> ({</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">    ...</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    coolNumber</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> newCoolNumber</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }),</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">  setWeirdNumber</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> (</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">state</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">newWeirdNumber</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">: </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">number</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">) </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> ({</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">    ...</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    weirdNumber</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> newWeirdNumber</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }),</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">})({</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  setBothNumbers</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    coolNumber</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> numberAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">set</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    weirdNumber</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> numberAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">set</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  },</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">})();</span></span></code></pre></div><p>The new reaction&#39;s payload type will be the intersection of the payload types from the reactions used, except when one of the payloads is <code>void</code>, in which case it will be ignored in the payload intersection.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-label="Permalink to &quot;State&quot;">​</a></h3><p><code>State</code></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><blockquote><p>&lt;<code>S</code>, <code>R</code>&gt;(<code>reactionsWithSelectors</code>): <code>NewBlockAdder</code>&lt;<code>State</code>, <code>WithStateSelector</code>&lt;<code>State</code>, <code>S</code>&gt;, <code>ReactionsWithoutSelectors</code>&lt;<code>State</code>, <code>R</code> &amp; <code>BasicAdapterMethods</code>&lt;<code>State</code>&gt;&gt;&gt;</p></blockquote><h3 id="type-parameters-1" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h3><h4 id="s" tabindex="-1">S <a class="header-anchor" href="#s" aria-label="Permalink to &quot;S&quot;">​</a></h4><p><code>S</code> <em>extends</em> <code>Selectors</code>&lt;<code>State</code>&gt;</p><h4 id="r" tabindex="-1">R <a class="header-anchor" href="#r" aria-label="Permalink to &quot;R&quot;">​</a></h4><p><code>R</code> <em>extends</em> <code>ReactionsWithSelectors</code>&lt;<code>State</code>, <code>S</code>&gt;</p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><h4 id="reactionswithselectors" tabindex="-1">reactionsWithSelectors <a class="header-anchor" href="#reactionswithselectors" aria-label="Permalink to &quot;reactionsWithSelectors&quot;">​</a></h4><p><a href="./Adapter.html"><code>Adapter</code></a>&lt;<code>State</code>, <code>S</code>, <code>R</code>&gt; = <code>...</code></p><h3 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><code>NewBlockAdder</code>&lt;<code>State</code>, <code>WithStateSelector</code>&lt;<code>State</code>, <code>S</code>&gt;, <code>ReactionsWithoutSelectors</code>&lt;<code>State</code>, <code>R</code> &amp; <code>BasicAdapterMethods</code>&lt;<code>State</code>&gt;&gt;&gt;</p>`,38)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
