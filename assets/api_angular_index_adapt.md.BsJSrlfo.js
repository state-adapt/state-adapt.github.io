import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Zc4NuDMF.js";const g=JSON.parse('{"title":"Variable: adapt","description":"","frontmatter":{},"headers":[],"relativePath":"api/angular/index/adapt.md","filePath":"api/angular/index/adapt.md"}'),h={name:"api/angular/index/adapt.md"};function l(p,s,k,e,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="variable-adapt" tabindex="-1">Variable: adapt <a class="header-anchor" href="#variable-adapt" aria-label="Permalink to &quot;Variable: adapt&quot;">​</a></h1><blockquote><p><code>const</code> <strong>adapt</strong>: <a href="./../../rxjs/index/StateAdapt.html"><code>StateAdapt</code></a>[<code>&quot;adapt&quot;</code>]</p></blockquote><p>Defined in: <a href="https://github.com/state-adapt/state-adapt/blob/4ff8540684d6d76a52452612f8fa44ffd7c6016a/libs/angular/src/lib/adapt.function.ts#L329" target="_blank" rel="noreferrer">lib/adapt.function.ts:329</a></p><p><code>adapt</code> wraps <a href="./../../rxjs/index/StateAdapt.html#adapt">StateAdapt.adapt</a> for Angular.</p><p><code>adapt</code> creates a store that will manage state while it has subscribers.</p><h3 id="example-initialstate-only" tabindex="-1">Example: initialState only <a class="header-anchor" href="#example-initialstate-only" aria-label="Permalink to &quot;Example: initialState only&quot;">​</a></h3><p><code>adapt(initialState)</code></p><p>The simplest way to use <code>adapt</code> is to only pass it an initial state. <code>adapt</code> returns a store object that is ready to start managing state once it has subscribers. The store object comes with <code>set</code> and <code>reset</code> methods for updating state, and a <code>state$</code> observable of the store&#39;s state.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> MyComponent</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">adapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;John&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  constructor</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">console</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">log</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// logs &#39;John&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">set</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;Johnsh&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// logs &#39;Johnsh&#39;</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">reset</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// logs &#39;John&#39;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><p>Usually you won&#39;t manually subscribe to state like this, but you can if you want the store to immediately start managing state and never clean it up.</p><h3 id="example-using-an-adapter" tabindex="-1">Example: Using an adapter <a class="header-anchor" href="#example-using-an-adapter" aria-label="Permalink to &quot;Example: Using an adapter&quot;">​</a></h3><p><code>adapt(initialState, adapter)</code></p><p>You can also pass in a state <a href="./../../core/src/Adapter.html">Adapter</a> object to customize the state change functions and selectors.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> MyComponent</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">adapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;John&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">    concat</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> (</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">state</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">payload</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">: </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">string</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">) </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">=&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> state</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> + </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">payload</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    selectors</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">      length</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;"> state</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> state</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">length</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">    },</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  constructor</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">console</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">log</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// Logs &#39;John&#39;</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">length$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">console</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">log</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// Logs 4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">concat</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;sh&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// logs &#39;Johnsh&#39; and 6</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">reset</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// logs &#39;John&#39; and 4</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><h3 id="example-using-adaptoptions" tabindex="-1">Example: Using AdaptOptions <a class="header-anchor" href="#example-using-adaptoptions" aria-label="Permalink to &quot;Example: Using AdaptOptions&quot;">​</a></h3><p><code>adapt(initialState, { adapter, sources, path })</code></p><p>You can also define an adapter, sources, and/or a state path as part of an AdaptOptions object.</p><p>Sources allow the store to declaratively react to external events rather than being commanded by imperative code in callback functions.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> MyService</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  tick$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">interval</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1000</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  clock</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">adapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    adapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">      increment</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;"> state</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> state</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> + </span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">    },</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    sources</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;"> this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">tick$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// or [this.tick$], or { set: this.tick$ }, or { set: [this.tick$] }</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;clock&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  constructor</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">clock</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">console</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">log</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// Logs 0, 1, 2, 3, etc.</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><p>When a store is subscribed to, it passes the subscriptions up to its sources. For example, if a store has an HTTP source, it will be triggered when the store receives its first subscriber, and it will be canceled when the store loses its last subscriber.</p><p>There are 4 possible ways sources can be defined:</p><p>1. A source can be a single source or <a href="https://rxjs.dev/guide/observable" target="_blank" rel="noreferrer">Observable</a><code>&lt;\`\`State\`\`&gt;</code>. When the source emits, it triggers the store&#39;s <code>set</code> method with the payload.</p><h4 id="example-single-source-or-observable" tabindex="-1">Example: Single source or observable <a class="header-anchor" href="#example-single-source-or-observable" aria-label="Permalink to &quot;Example: Single source or observable&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> MyService</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  nameChange$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">source</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">string</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">adapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;John&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    sources</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;"> this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">nameChange$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;name&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  constructor</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">console</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">log</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// Logs &#39;John&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">nameChange$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">next</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;Johnsh&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// logs &#39;Johnsh&#39;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><p>2. A source can be an array of sources or <a href="https://rxjs.dev/guide/observable" target="_blank" rel="noreferrer">Observable</a><code>&lt;\`\`State\`\`&gt;</code>. When any of the sources emit, it triggers the store&#39;s <code>set</code> method with the payload.</p><h4 id="example-array-of-sources-or-observables" tabindex="-1">Example: Array of sources or observables <a class="header-anchor" href="#example-array-of-sources-or-observables" aria-label="Permalink to &quot;Example: Array of sources or observables&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> MyService</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  nameChange$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">source</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">string</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&gt;();</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  nameChange2$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">source</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">string</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">adapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;John&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    sources</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> [</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">nameChange$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">nameChange2$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">],</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;name&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  constructor</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">console</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">log</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// Logs &#39;John&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">nameChange$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">next</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;Johnsh&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// logs &#39;Johnsh&#39;</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">nameChange2$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">next</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;Johnsh2&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// logs &#39;Johnsh2&#39;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><p>3. A source can be an object with keys that match the names of the <a href="./../../core/src/Adapter.html">Adapter</a> state change functions, with a corresponding source or array of sources that trigger the store&#39;s reaction with the payload.</p><h4 id="example-object-of-sources-or-observables" tabindex="-1">Example: Object of sources or observables <a class="header-anchor" href="#example-object-of-sources-or-observables" aria-label="Permalink to &quot;Example: Object of sources or observables&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> MyService</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  nameChange$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">source</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">string</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&gt;();</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  nameReset$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">source</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;">void</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">adapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;John&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    sources</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">      set</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;"> this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">nameChange$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">      reset</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;"> this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">nameReset$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">    },</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;name&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  constructor</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">console</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">log</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// Logs &#39;John&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">nameChange$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">next</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;Johnsh&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// logs &#39;Johnsh&#39;</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">nameReset$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">next</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(); </span><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">// logs &#39;John&#39;</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><p>4. A source can be a function that takes in a detached store (doesn&#39;t chain off of sources) and returns any of the above types of sources or observables.</p><h4 id="example-function-that-returns-an-observable" tabindex="-1">Example: Function that returns an observable <a class="header-anchor" href="#example-function-that-returns-an-observable" aria-label="Permalink to &quot;Example: Function that returns an observable&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> MyService</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">adapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;John&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, {</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">    sources</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;"> store</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;"> store</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">pipe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">      delay</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">1000</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">),</span></span>
<span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">      map</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">name</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> =&gt;</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> \`</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">\${</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">}</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">sh\`</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">),</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">    ),</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">    path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;name&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  constructor</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">name</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">console</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">log</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">    // Logs &#39;John&#39;, then &#39;Johnsh&#39; after 1 second, &#39;Johnshsh&#39; after 2 seconds, etc.</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><p>Defining a path alongside sources is recommended to enable debugging with Redux DevTools. It&#39;s easy to trace singular state changes caused by user events, but it&#39;s much harder to trace state changes caused by RxJS streams.</p><p>The path string specifies the location in the global store you will find the state for the store being created (while the store has subscribers). StateAdapt splits this string at periods <code>&#39;.&#39;</code> to create an object path within the global store. Here are some example paths and the resulting global state objects:</p><h4 id="example-paths-and-global-state" tabindex="-1">Example: Paths and global state <a class="header-anchor" href="#example-paths-and-global-state" aria-label="Permalink to &quot;Example: Paths and global state&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> MyComponent</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  store</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">adapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;number&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  constructor</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">store</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">    // global state: { number: 0 }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> MyComponent</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  store</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">adapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;featureA.number&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  constructor</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">store</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">    // global state: { featureA: { number: 0 } }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> MyComponent</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  store</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">adapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;featureA.featureB.number&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  constructor</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">store</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">    // global state: { featureA: { featureB: { number: 0 } } }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><p>Each store completely owns its own state. If more than one store tries to use the same path, StateAdapt will throw this error:</p><p><code>Path &#39;\${path}&#39; collides with &#39;\${existingPath}&#39;, which has already been initialized as a state path.</code></p><p>This applies both to paths that are identical as well as paths that are substrings of each other. For example, if <code>&#39;featureA&#39;</code> is already being used by a store and then another store tried to initialize at <code>&#39;featureA.number&#39;</code>, that error would be thrown.</p><p>To help avoid this error, StateAdapt provides a <a href="./../../core/src/getId.html">getId</a> function that can be used to generate unique paths:</p><h4 id="example-getid-for-unique-paths" tabindex="-1">Example: getId for unique paths <a class="header-anchor" href="#example-getid-for-unique-paths" aria-label="Permalink to &quot;Example: getId for unique paths&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">import</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">getId</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> } </span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">from</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;@state-adapt/core&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#AF00DB;">export</span><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#267F99;"> MyComponent</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  store1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">adapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;number&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> + </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">getId</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() });</span></span>
<span class="line"><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">  store2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">adapt</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#098658;">0</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, { </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#001080;">:</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;"> &#39;number&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;"> + </span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">getId</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-1);--shiki-light:#0000FF;">  constructor</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">() {</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">store1</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:var(--vp-c-brand-3-light-5);--shiki-light:#0000FF;">    this</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">store2</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">state$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F98F;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">    // global state includes both: { number0: 0, number1: 0 }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">  }</span></span>
<span class="line"><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">}</span></span></code></pre></div><h3 id="no-path" tabindex="-1">No path <a class="header-anchor" href="#no-path" aria-label="Permalink to &quot;No path&quot;">​</a></h3><p>If no path is provided, then the store&#39;s path defaults to the result of calling <a href="./../../core/src/getId.html">getId</a>.</p><h3 id="remember" tabindex="-1">Remember! <a class="header-anchor" href="#remember" aria-label="Permalink to &quot;Remember!&quot;">​</a></h3><p>The store needs to have subscribers in order to start managing state, and it only subscribes to sources when it has subscribers itself.</p>`,49)]))}const y=i(h,[["render",l]]);export{g as __pageData,y as default};
