"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[170],{5170:(u,o,n)=>{n.r(o),n.d(o,{GettingStartedComponent:()=>p});var r=n(1496),d=n(2309),t=n(5e3);let p=(()=>{class e{constructor(){this.md="# Getting Started\n\nSet up StateAdapt with\n\n- [Angular](getting-started#angular)\n- [Angular and NgRx](getting-started#angular-and-ngrx)\n- [Angular and NGXS](getting-started#angular-and-ngxs)\n- [React](getting-started#react)\n- [React and Redux](getting-started#react-and-redux)\n\n## Angular\n\n[StackBlitz Demo](https://stackblitz.com/github/state-adapt/state-adapt/tree/stackblitz-ng-sa-counter?file=apps%2Fng-sa-counter%2Fsrc%2Fapp%2Fapp.module.ts)\n\nFirst, `npm install`:\n\n```\nnpm i -s @state-adapt/core @state-adapt/angular\n```\n\nInclude in app.module.ts like so:\n\n```typescript\nimport { defaultStoreProvider } from '@state-adapt/core';\n// ...\n    providers: [defaultStoreProvider],\n```\n\nNow in a component or service:\n\n```typescript\nimport { adapt } from '@state-adapt/angular';\n// ...\n  stringStore = adapt('string', '');\n  constructor() {\n    this.stringStore.state$.subscribe(console.log);\n    this.stringStore.set('Hello World!');\n  }\n// ...\n```\n\nOpen up Redux Devtools and you should see the state update immediately to `'Hello World!'`.\n\n## Angular and NgRx\n\n[StackBlitz Demo](https://stackblitz.com/github/state-adapt/state-adapt/tree/stackblitz-ng-sa-ngrx-counter?file=apps%2Fng-sa-ngrx-counter%2Fsrc%2Fapp%2Fapp.module.ts)\n\nFirst, `npm install`:\n\n```\nnpm i -s @state-adapt/core @state-adapt/ngrx\n```\n\nInclude in your app.module.ts like so:\n\n```typescript\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { adaptReducer, actionSanitizer, stateSanitizer } from '@state-adapt/core';\n// ...\n// In your module imports array:\n    StoreModule.forRoot({ adapt: adaptReducer }),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25,\n      logOnly: environment.production,\n      actionSanitizer,\n      stateSanitizer,\n    }),\n```\n\nNow in a component or service:\n\n```typescript\nimport { adapt } from '@state-adapt/ngrx';\n// ...\n  stringStore = adapt('string', '');\n  constructor() {\n    this.stringStore.state$.subscribe(console.log);\n    this.stringStore.set('Hello World!');\n  }\n// ...\n```\n\nOpen up Redux Devtools and you should see the state update immediately to `'Hello World!'`.\n\n## Angular and NGXS\n\n[StackBlitz Demo](https://stackblitz.com/github/state-adapt/state-adapt/tree/stackblitz-ng-sa-ngxs-counter?file=apps%2Fng-sa-ngxs-counter%2Fsrc%2Fapp%2Fapp.module.ts)\n\nFirst, `npm install`:\n\n```\nnpm i -s @state-adapt/core @state-adapt/ngxs\n```\n\nInclude in your app.module.ts like so:\n\n```typescript\nimport { NgxsModule } from '@ngxs/store';\nimport { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';\nimport { actionSanitizer, stateSanitizer } from '@state-adapt/core';\nimport { AdaptState } from '@state-adapt/ngxs';\n// ...\n// In your module imports array:\n    NgxsModule.forRoot([AdaptState], {\n      developmentMode: !environment.production\n    }),\n    NgxsReduxDevtoolsPluginModule.forRoot({\n      disabled: environment.production,\n      actionSanitizer,\n      stateSanitizer,\n    }),\n```\n\nNow in a component or service:\n\n```typescript\nimport { adapt } from '@state-adapt/ngxs';\n// ...\n  stringStore = adapt('string', '');\n  constructor() {\n    this.stringStore.state$.subscribe(console.log);\n    this.stringStore.set('Hello World!');\n  }\n// ...\n```\n\nOpen up Redux Devtools and you should see the state update immediately to `'Hello World!'`.\n\n# React\n\n[StackBlitz Demo](https://stackblitz.com/edit/state-adapt-react)\n\nFirst, `npm install`:\n\n```\nnpm i -s @state-adapt/core @state-adapt/react\n```\n\nDefine your adapt store:\n\n```typescript\nimport { actionSanitizer, stateSanitizer, createStore } from '@state-adapt/core';\n\nconst enableReduxDevTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__?.({\n  actionSanitizer,\n  stateSanitizer,\n});\nexport const adapt = createStore(enableReduxDevTools);\n```\n\nProvide StateAdapt in your app context:\n\n```tsx\nimport { AdaptContext } from '@state-adapt/react';\nimport { adapt, store } from './store';\n// ...\n  <AdaptContext.Provider value={adapt}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </AdaptContext.Provider>,\n```\n\nAnd now you can use it in your components:\n\n```tsx\nimport { useSource, useAdapt, useObservable } from '@state-adapt/react';\n\nexport function App() {\n  const stringStore = useAdapt('string', '');\n  const str = useObservable(stringStore.state$);\n\n  return (\n    <h1>{str}</h1>\n    <button onClick={() => stringStore.set('new string')}>New String</button>\n  )\n}\n```\n\nOpen up Redux Devtools and you should see the state update immediately to `'new string'`.\n\n# React and Redux\n\n[StackBlitz Demo](https://stackblitz.com/edit/state-adapt-react-with-redux)\n\nFirst, `npm install`:\n\n```\nnpm i -s @state-adapt/core @state-adapt/react\n```\n\nDefine your Redux store:\n\n```typescript\nimport {\n  adaptReducer,\n  actionSanitizer,\n  stateSanitizer,\n  createStateAdapt,\n} from '@state-adapt/core';\nimport { combineReducers, createStore } from 'redux';\n\nconst enableReduxDevTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__?.({\n  actionSanitizer,\n  stateSanitizer,\n});\n\nexport const store = createStore(\n  combineReducers({\n    adapt: adaptReducer,\n    // Any other reducers you have with Redux\n  }),\n  enableReduxDevTools,\n);\nexport const adapt = createStateAdapt(store);\n```\n\nProvide StateAdapt in your app context:\n\n```tsx\nimport { Provider } from 'react-redux';\nimport { AdaptContext } from '@state-adapt/react';\nimport { adapt, store } from './store';\n// ...\n  <AdaptContext.Provider value={adapt}>\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>\n  </AdaptContext.Provider>,\n```\n\nAnd now you can use it in your components:\n\n```tsx\nimport { useSource, useAdapt, useObservable } from '@state-adapt/react';\n\nexport function App() {\n  const stringStore = useAdapt('string', '');\n  const str = useObservable(stringStore.state$);\n\n  return (\n    <h1>{str}</h1>\n    <button onClick={() => stringStore.set('new string')}>New String</button>\n  )\n}\n```\n\nOpen up Redux Devtools and you should see the state update immediately to `'new string'`.\n"}}return e.\u0275fac=function(a){return new(a||e)},e.\u0275cmp=t.Xpm({type:e,selectors:[["state-adapt-getting-started"]],standalone:!0,features:[t.jDz],decls:2,vars:1,consts:[[3,"data"]],template:function(a,c){1&a&&(t.TgZ(0,"state-adapt-content"),t._UZ(1,"markdown",0),t.qZA()),2&a&&(t.xp6(1),t.Q6J("data",c.md))},dependencies:[d.S,r.JP,r.lF],encapsulation:2}),e})()}}]);