"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[105],{8105:(u,a,e)=>{e.r(a),e.d(a,{DocsReactComponent:()=>i});var r=e(1917),c=e(2309),t=e(4650);let i=(()=>{class n{constructor(){this.html='<h1 id="state-adaptreact">@state-adapt/react</h1>\n<h2 id="peer-dependencies">Peer Dependencies</h2>\n<p><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/core\'})); void(0)">@state-adapt/core</a></p>\n<p><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs\'})); void(0)">@state-adapt/rxjs</a></p>\n<h2 id="index">Index</h2>\n<p><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/react/docs/react#usestore\'})); void(0)"><code>useStore</code></a></p>\n<p><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/react/docs/react#useadapt\'})); void(0)"><code>useAdapt</code></a></p>\n<h2 id="migration-guide">Migration Guide</h2>\n<p><a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/react/docs/react#200\'})); void(0)">2.0.0</a></p>\n<h2 id="usestore"><code>useStore</code></h2>\n<blockquote>\n<p>Copilot tip: Copy examples into your file or click to definition to open file with context for better Copilot suggestions.</p>\n</blockquote>\n<p>  <code>useStore</code> is a custom hook that takes in a store created with <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#stateadaptadapt\'})); void(0)"><code>StateAdapt.adapt</code></a>, subscribes to it,\n  and returns a proxy that can be used as if it is an object with derived state itself from selectors.\n  When the store&#39;s state changes, it will trigger the component to re-render, no matter what selectors are being accessed from the proxy.\n  To avoid unnecessary re-renders, you can pass in a list of selector names to only trigger re-renders when those specific selectors change.\n  The selectors are evaluated lazily.</p>\n<h4 id="example-basic-usestore-usage">Example: Basic useStore usage</h4>\n<pre><code class="language-tsx">import { adapt } from &#39;../store&#39;; // Import from wherever you configure StateAdapt\nimport { useStore } from &#39;@state-adapt/react&#39;;\n\nconst nameStore = adapt(&#39;Bob&#39;, {\n  concat: (state, name: string) =&gt; state + name,\n  selectors: {\n    uppercase: state =&gt; state.toUpperCase(),\n  }\n});\n\nexport function MyComponent() {\n  const name = useStore(nameStore);\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Hello {name.uppercase}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; nameStore.concat(&#39;!&#39;)}&gt;Concat&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n<h4 id="example-usestore-with-filter-selectors">Example: useStore with filter selectors</h4>\n<pre><code class="language-tsx">import { adapt } from &#39;../store&#39;; // Import from wherever you configure StateAdapt\nimport { useStore } from &#39;@state-adapt/react&#39;;\n\nconst nameStore = adapt(&#39;Bob&#39;, {\n  concat: (state, name: string) =&gt; state + name,\n  selectors: {\n    uppercase: state =&gt; state.toUpperCase(),\n  }\n});\n\nexport function MyComponent() {\n  // Only nameStore.uppercase$ will trigger re-renders\n  const name = useStore(nameStore, [&#39;uppercase&#39;]]);\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Hello {name.uppercase}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; nameStore.concat(&#39;!&#39;)}&gt;Concat&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n<h4 id="example-lazy-selector-evaluation">Example: Lazy selector evaluation</h4>\n<pre><code class="language-tsx">import { adapt } from &#39;../store&#39;; // Import from wherever you configure StateAdapt\nimport { useStore } from &#39;@state-adapt/react&#39;;\n\nconst counterStore = adapt(0, {\n  increment: state =&gt; state + 1,\n  decrement: state =&gt; state - 1,\n  selectors: {\n    isEven: state =&gt; state % 2 === 0,\n    isOdd: state =&gt; state % 2 !== 0,\n  }\n});\n\nexport function MyComponent() {\n  const counter = useStore(counterStore);\n\n  // Until the count is greater than 5 and the extra part below renders,\n  // the isEvent and isOdd selectors will not be evaluated\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Counter: {counter.state}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; counterStore.increment()}&gt;Increment&lt;/button&gt;\n      &lt;button onClick={() =&gt; counterStore.decrement()}&gt;Decrement&lt;/button&gt;\n\n      {counter.state &gt; 5 &amp;&amp; (\n        &lt;h2&gt;Is even: {counter.isEven ? &#39;Yes&#39; : &#39;No&#39;}&lt;/h2&gt;\n        &lt;h2&gt;Is odd: {counter.isOdd ? &#39;Yes&#39; : &#39;No&#39;}&lt;/h2&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n<h2 id="useadapt"><code>useAdapt</code></h2>\n<blockquote>\n<p>Copilot tip: Copy examples into your file or click to definition to open file with context for better Copilot suggestions.</p>\n</blockquote>\n<p>  <code>useAdapt</code> is a hook that wraps <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#stateadaptadapt\'})); void(0)"><code>StateAdapt.adapt</code></a> and <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/react/docs/react#usestore\'})); void(0)"><code>useStore</code></a>.\n  It creates a store, immediately subscribes to it, and returns a <code>[proxy, store]</code> tuple, where\n  <code>proxy</code> is the return value of <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/react/docs/react#usestore\'})); void(0)"><code>useStore</code></a> and <code>store</code> is the return value of <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#stateadaptadapt\'})); void(0)"><code>StateAdapt.adapt</code></a>.</p>\n<p>  <code>useAdapt</code> is like an advanced version of <a href="https://beta.reactjs.org/reference/react/useState"><code>useState</code></a>\n  or <a href="https://beta.reactjs.org/reference/react/useReducer"><code>useReducer</code></a>. All of the values you pass into it\n  are only used once, when the store is created. Any further updates to the store need to be done through\n  the store itself (returned by <code>useAdapt</code> in the second position of the tuple) or indirectly through the sources\n  passed into <code>useAdapt</code>.</p>\n<h3 id="example-initialstate-only">Example: initialState only</h3>\n<p>  <code>useAdapt(initialState)</code></p>\n<p>  The simplest way to use <code>useAdapt</code> is to only pass it an initial state. <code>useAdapt</code> returns a store object that is ready to start managing state once it has subscribers.\n  The store object comes with <code>set</code> and <code>reset</code> methods for updating state, and a <code>state$</code> observable of the store&#39;s state.</p>\n<pre><code class="language-tsx">export function MyComponent() {\n  const [name, nameStore] = useAdapt(&#39;John&#39;);\n\n  // Shows &quot;John&quot; first\n  // Shows &quot;Johnsh&quot; when the &quot;Set&quot; button is clicked\n  // Shows &quot;John&quot; again when the &quot;Reset&quot; button is clicked\n  return (\n    &lt;&gt;\n      &lt;div&gt;{name.state}&lt;/div&gt;\n      &lt;button onClick={() =&gt; nameStore.set(&#39;Johnsh&#39;)}&gt;Set&lt;/button&gt;\n      &lt;button onClick={() =&gt; nameStore.reset()}&gt;Reset&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<h3 id="example-using-an-adapter">Example: Using an adapter</h3>\n<p>  <code>useAdapt(initialState, adapter)</code></p>\n<p>  You can also pass in a state <code>Adapter</code> object to customize the state change functions and selectors.</p>\n<pre><code class="language-tsx">export function MyComponent() {\n  const [name, nameStore] = useAdapt(&#39;John&#39;, {\n    concat: (state, payload: string) =&gt; state + payload,\n    selectors: {\n      length: state =&gt; state.length,\n    },\n  });\n\n  // Shows &#39;John&#39; and 4 first\n  // Shows &#39;Johnsh&#39; and 6 when the &quot;Concat&quot; button is clicked\n  // Shows &#39;John&#39; and 4 again when the &quot;Reset&quot; button is clicked\n  return (\n    &lt;&gt;\n      &lt;div&gt;{name.state}&lt;/div&gt;\n      &lt;div&gt;{name.length}&lt;/div&gt;\n      &lt;button onClick={() =&gt; nameStore.concat(&#39;sh&#39;)}&gt;Concat&lt;/button&gt;\n      &lt;button onClick={() =&gt; nameStore.reset()}&gt;Reset&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<h3 id="example-using-adaptoptions">Example: Using <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#adaptoptions\'})); void(0)"><code>AdaptOptions</code></a></h3>\n<p>  <code>useAdapt(initialState, { adapter, sources, path })</code></p>\n<p>  You can also define an adapter, sources, and/or a state path as part of an <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#adaptoptions\'})); void(0)"><code>AdaptOptions</code></a> object.</p>\n<p>  Sources allow the store to declaratively react to external events rather than being commanded\n  by imperative callback functions.</p>\n<pre><code class="language-tsx">const tick$ = interval(1000).pipe(toSource(&#39;tick$&#39;));\n\nexport function MyComponent() {\n  const [clock] = adapt(0, {\n    adapter: {\n      increment: state =&gt; state + 1,\n    },\n    sources: tick$, // or [tick$], or { set: tick$ }, or { set: [tick$] }\n    path: &#39;clock&#39;,\n  });\n\n  // Shows 0, 1, 2, 3, etc. every second\n  return &lt;div&gt;{clock.state}&lt;/div&gt;;\n}\n</code></pre>\n<p>  There are 4 possible ways sources can be defined:</p>\n<p>  1. A source can be a single <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#source\'})); void(0)"><code>Source</code></a> or <a href="https://rxjs.dev/guide/observable">Observable</a>&lt;<a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/core#action\'})); void(0)"><code>Action</code></a>&lt;<code>State</code>&gt;&gt;. When the source emits, it triggers the store&#39;s <code>set</code> method\n  with the payload.</p>\n<h4 id="example-single-source">Example: Single source</h4>\n<pre><code class="language-tsx">const nameChange$ = new Source&lt;string&gt;(&#39;nameChange$&#39;);\n\nexport function MyComponent() {\n  const [name] = useAdapt(&#39;John&#39;, {\n    sources: nameChange$,\n    path: &#39;name&#39;,\n  });\n\n  // Shows &#39;John&#39; first\n  // Shows &#39;Johnsh&#39; when the &quot;Set&quot; button is clicked\n  return (\n    &lt;&gt;\n      &lt;div&gt;{name.state}&lt;/div&gt;\n      &lt;button onClick={() =&gt; nameChange$.next(&#39;Johnsh&#39;)}&gt;Set&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<p>  2. A source can be an array of <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#source\'})); void(0)"><code>Source</code></a> or <a href="https://rxjs.dev/guide/observable">Observable</a>&lt;<a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/core#action\'})); void(0)"><code>Action</code></a>&lt;<code>State</code>&gt;&gt;. When any of the sources emit, it triggers the store&#39;s <code>set</code>\n   method with the payload.</p>\n<h4 id="example-array-of-sources">Example: Array of sources</h4>\n<pre><code class="language-tsx">const nameChange$ = new Source&lt;string&gt;(&#39;nameChange$&#39;);\nconst nameChange2$ = new Source&lt;string&gt;(&#39;nameChange2$&#39;);\n\nexport function MyComponent() {\n  const [name] = useAdapt(&#39;John&#39;, {\n    sources: [nameChange$, nameChange2$],\n    path: &#39;name&#39;,\n  });\n\n  // Shows &#39;John&#39; first\n  // Shows &#39;Johnsh&#39; when the &quot;Set&quot; button is clicked\n  // Shows &#39;Johnsh2&#39; when the &quot;Set2&quot; button is clicked\n  return (\n    &lt;&gt;\n      &lt;div&gt;{name.state}&lt;/div&gt;\n      &lt;button onClick={() =&gt; nameChange$.next(&#39;Johnsh&#39;)}&gt;Set&lt;/button&gt;\n      &lt;button onClick={() =&gt; nameChange2$.next(&#39;Johnsh2&#39;)}&gt;Set2&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<p>  3. A source can be an object with keys that match the names of the <code>Adapter</code> state change functions, with a corresponding source or array of\n  sources that trigger the store&#39;s reaction with the payload.</p>\n<h4 id="example-object-of-sources">Example: Object of sources</h4>\n<pre><code class="language-tsx">const nameChange$ = new Source&lt;string&gt;(&#39;nameChange$&#39;);\nconst nameReset$ = new Source&lt;void&gt;(&#39;nameReset$&#39;);\n\nexport function MyComponent() {\n  const [name] = useAdapt(&#39;John&#39;, {\n    sources: {\n      set: nameChange$,\n      reset: [nameReset$], // Can be array of sources too\n    },\n    path: &#39;name&#39;,\n  });\n\n  // Shows &#39;John&#39; first\n  // Shows &#39;Johnsh&#39; when the &quot;Set&quot; button is clicked\n  // Shows &#39;John&#39; again when the &quot;Reset&quot; button is clicked\n  return (\n    &lt;&gt;\n      &lt;div&gt;{name.state}&lt;/div&gt;\n      &lt;button onClick={() =&gt; nameChange$.next(&#39;Johnsh&#39;)}&gt;Set&lt;/button&gt;\n      &lt;button onClick={() =&gt; nameReset$.next()}&gt;Reset&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<p>  4. A source can be a function that takes in a detached store (result of calling <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#stateadaptwatch\'})); void(0)"><code>StateAdapt.watch</code></a>) and returns any of the above\n  types of sources.</p>\n<h4 id="example-function-that-returns-a-source">Example: Function that returns a source</h4>\n<pre><code class="language-tsx">export function MyComponent() {\n  const [name] = useAdapt(&#39;John&#39;, {\n    sources: store =&gt; store.state$.pipe(\n      delay(1000),\n      map(name =&gt; `${name}sh`),\n      toSource(&#39;recursive nameChange$&#39;),\n    ),\n  });\n\n  // Shows &#39;John&#39; first\n  // Shows &#39;Johnsh&#39; after 1 second, then &#39;Johnshsh&#39; after 1 more second, etc.\n  return &lt;div&gt;{name.state}&lt;/div&gt;;\n}\n</code></pre>\n<p>  Defining a path alongside sources is recommended to enable debugging with Redux DevTools. It&#39;s easy to trace\n  singular state changes caused by user events, but it&#39;s much harder to trace state changes caused by RxJS streams.</p>\n<p>  The path string specifies the location in the global store you will find the state for the store being created\n  (while the store has subscribers). StateAdapt splits this string at periods <code>&#39;.&#39;</code> to create an object path within\n  the global store. Here are some example paths and the resulting global state objects:</p>\n<h4 id="example-paths-and-global-state">Example: Paths and global state</h4>\n<pre><code class="language-tsx">const [states, store] = useAdapt(0, { path: &#39;number&#39; });\n// global state: { number: 0 }\n</code></pre>\n<pre><code class="language-typescript">const [states, store] = useAdapt(0, { path: &#39;featureA.number&#39; });\n// global state: { featureA: { number: 0 } }\n</code></pre>\n<pre><code class="language-typescript">const [states, store] = useAdapt(0, { path: &#39;featureA.featureB.number&#39; });\n// global state: { featureA: { featureB: { number: 0 } } }\n</code></pre>\n<p>  Each store completely owns its own state. If more than one store tries to use the same path, StateAdapt will throw this error:</p>\n<p>  <code>Path &#39;${path}&#39; collides with &#39;${existingPath}&#39;, which has already been initialized as a state path.</code></p>\n<p>  This applies both to paths that are identical as well as paths that are subtrings of each other. For example, if <code>&#39;featureA&#39;</code>\n  is already being used by a store and then another store tried to initialize at <code>&#39;featureA.number&#39;</code>, that error would be thrown.</p>\n<p>  To help avoid this error, StateAdapt provides a <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/core#getid\'})); void(0)"><code>getId</code></a> function that can be used to generate unique paths:</p>\n<h4 id="example-getid-for-unique-paths">Example: getId for unique paths</h4>\n<pre><code class="language-tsx">import { getId } from &#39;@state-adapt/core&#39;;\n\nconst path0 = &#39;number&#39; + getId();\nconst path1 = &#39;number&#39; + getId();\n\nexport function MyComponent() {\n  const [states1, store1] = useAdapt(0, { path: path0 });\n  const [states2, store2] = useAdapt(0, { path: path1 });\n  // global state: { number0: 0, number1: 0 }\n  return &lt;div&gt;{states1.state} {states2.state}&lt;/div&gt;;\n}\n</code></pre>\n<h3 id="remember">Remember!</h3>\n<p>  The store needs to have subscribers in order to start managing state.</p>\n\x3c!-- cache 2 --\x3e\n\n<h3 id="200">2.0.0</h3>\n<p>The 4 overloads of <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#stateadaptadapt\'})); void(0)"><code>StateAdapt.adapt</code></a> have been removed.\nSince <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/react/docs/react#useadapt\'})); void(0)"><code>useAdapt</code></a> wraps <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#stateadaptadapt\'})); void(0)"><code>StateAdapt.adapt</code></a>,\nthe same changes apply to <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/react/docs/react#useadapt\'})); void(0)"><code>useAdapt</code></a>.\nSee the <a href="javascript:document.dispatchEvent(new CustomEvent(\'routeTo\', {detail: \'/docs/rxjs#200\'})); void(0)">migration guide for @state-adapt/rxjs</a> for details.</p>\n'}}return n.\u0275fac=function(o){return new(o||n)},n.\u0275cmp=t.Xpm({type:n,selectors:[["sa-docs-react"]],standalone:!0,features:[t.jDz],decls:2,vars:1,consts:[[3,"html"]],template:function(o,p){1&o&&(t.TgZ(0,"sa-content"),t._UZ(1,"sa-html",0),t.qZA()),2&o&&(t.xp6(1),t.Q6J("html",p.html))},dependencies:[c.S,r.XB],encapsulation:2}),n})()}}]);