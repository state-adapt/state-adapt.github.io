import{_ as t,c as s,o as e,ag as i}from"./chunks/framework.DjwDO6w3.js";const k=JSON.parse('{"title":"Variable: watch","description":"","frontmatter":{"definedIn":"https://github.com/state-adapt/state-adapt/blob/4e457fa33331f265d75eaddb646761782498dd8e/libs/angular/src/lib/watch.function.ts#L33"},"headers":[],"relativePath":"api/angular/index/watch.md","filePath":"api/angular/index/watch.md"}'),n={name:"api/angular/index/watch.md"};function h(l,a,d,o,p,r){return e(),s("div",null,a[0]||(a[0]=[i('<h1 id="variable-watch" tabindex="-1">Variable: watch <a class="header-anchor" href="#variable-watch" aria-label="Permalink to &quot;Variable: watch&quot;">​</a></h1><blockquote><p><code>const</code> <strong>watch</strong>: <a href="./../../rxjs/index/StateAdapt.html"><code>StateAdapt</code></a>[<code>&quot;watch&quot;</code>]</p></blockquote><p>Defined in: <a href="https://github.com/state-adapt/state-adapt/blob/4e457fa33331f265d75eaddb646761782498dd8e/libs/angular/src/lib/watch.function.ts#L33" target="_blank" rel="noreferrer">lib/watch.function.ts:33</a></p><p><code>watch</code> wraps <a href="./../../rxjs/index/StateAdapt.html#watch">StateAdapt.watch</a> for Angular.</p><p><code>watch</code> returns a detached store (doesn&#39;t chain off of sources). This allows you to watch state without affecting anything. It takes 2 arguments: The path of the state you are interested in, and the adapter containing the selectors you want to use.</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">watch</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">path</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">adapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">)</span></span></code></pre></div><p>path — Object path in Redux Devtools</p><p>adapter — Object with state change functions and selectors</p><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h3><p><code>watch</code> enables accessing state without subscribing to sources. For example, if your adapter manages the loading state for an HTTP request and you need to know if the request is loading before the user is interested in the data, <code>watch</code> can give you access to it without triggering the request.</p><h4 id="example-accessing-loading-state" tabindex="-1">Example: Accessing loading state <a class="header-anchor" href="#example-accessing-loading-state" aria-label="Permalink to &quot;Example: Accessing loading state&quot;">​</a></h4><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes sa-dark light-plus vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">watch</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:var(--vp-c-brand-2-light-4);--shiki-light:#A31515;">&#39;data&#39;</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">httpAdapter</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">).</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">loading$</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#00DAEF;--shiki-light:#795E26;">subscribe</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">console</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">.</span><span style="--shiki-dark:#4BF3C8;--shiki-light:#001080;">log</span><span style="--shiki-dark:#EEF0F9;--shiki-light:#000000;">);</span></span></code></pre></div>',12)]))}const g=t(n,[["render",h]]);export{k as __pageData,g as default};
